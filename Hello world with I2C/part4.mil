_main:
  begin
//part4.c,11 :: 		INTCON=0;
	INTCON <- 0
//part4.c,12 :: 		TRISE =0;
	TRISE <- 0
//part4.c,13 :: 		TRISD =0;
	TRISD <- 0
//part4.c,14 :: 		TRISB =0;
	TRISB <- 0
//part4.c,15 :: 		Soft_I2C_Config(&PORTC, 4, 3); //Use PortC pins 4 and 3
	FARG_Soft_I2C_Init+0 <- 0
	CALL _Soft_I2C_Init
//part4.c,17 :: 		TRISB =0x00;
	TRISB <- 0
//part4.c,18 :: 		PORTB =0x00;
	PORTB <- 0
//part4.c,20 :: 		Soft_I2C_Start(); // Issue I2C start signal
	CALL _Soft_I2C_Start
//part4.c,21 :: 		Soft_I2C_Write(0xA2); // Send byte via I2C (Address of 24cO2)
	FARG_Soft_I2C_Write+0 <- 162
	CALL _Soft_I2C_Write
//part4.c,22 :: 		Soft_I2C_Write(3); // Send byte (address of EEPROM location)
	FARG_Soft_I2C_Write+0 <- 3
	CALL _Soft_I2C_Write
//part4.c,24 :: 		Soft_I2C_Write("Hello");
	FARG_Soft_I2C_Write+0 <- 0
	CALL _Soft_I2C_Write
//part4.c,25 :: 		Soft_I2C_Write("World");
	FARG_Soft_I2C_Write+0 <- 0
	CALL _Soft_I2C_Write
//part4.c,26 :: 		Soft_I2C_Write("Test");
	FARG_Soft_I2C_Write+0 <- 0
	CALL _Soft_I2C_Write
//part4.c,27 :: 		Soft_I2C_Stop();
	CALL _Soft_I2C_Stop
//part4.c,29 :: 		Soft_I2C_Start(); // Issue I2C start signal
	CALL _Soft_I2C_Start
//part4.c,30 :: 		Soft_I2C_Write(0xA2); // Send byte (device address + W)
	FARG_Soft_I2C_Write+0 <- 162
	CALL _Soft_I2C_Write
//part4.c,31 :: 		Soft_I2C_Write(3); // Send byte (EEPROM location to read from)
	FARG_Soft_I2C_Write+0 <- 3
	CALL _Soft_I2C_Write
//part4.c,32 :: 		Soft_I2C_Start(); // Issue I2C start signal
	CALL _Soft_I2C_Start
//part4.c,33 :: 		Soft_I2C_Stop();
	CALL _Soft_I2C_Stop
//part4.c,34 :: 		data[0] = Soft_I2C_Read(1); // Read data (send ACK)
	FARG_Soft_I2C_Read+0 <- 1
	CALL _Soft_I2C_Read
	main_data_L0 <- STACK_0
//part4.c,35 :: 		data[1] = Soft_I2C_Read(1); // Read data (send ACK)
	FARG_Soft_I2C_Read+0 <- 1
	CALL _Soft_I2C_Read
	main_data_L0+2 <- STACK_0
//part4.c,36 :: 		data[2] = Soft_I2C_Read(1); // Read data (send ACK)
	FARG_Soft_I2C_Read+0 <- 1
	CALL _Soft_I2C_Read
	main_data_L0+4 <- STACK_0
//part4.c,37 :: 		data[3] = Soft_I2C_Read(0); // Read data (NO ACK)
	FARG_Soft_I2C_Read+0 <- 0
	CALL _Soft_I2C_Read
	main_data_L0+6 <- STACK_0
//part4.c,38 :: 		Soft_I2C_Stop();
	CALL _Soft_I2C_Stop
//part4.c,40 :: 		Usart_Init(9600);
	SPBRG <- 51
	asm: BSF	TXSTA, BRGH
	CALL _Usart_Init
//part4.c,41 :: 		text1 =data[0];
	main_text1_L0 <- main_data_L0
//part4.c,42 :: 		for (i=0;i<strlen(data[0]);i++)
	main_i_L0 <- 0
L_main_0:
	FARG_strlen+0 <- main_data_L0
	CALL _strlen
	if ( main_i_L0 >= STACK_0) then goto L_main_1
//part4.c,44 :: 		Usart_Write(text1[i]);    // Sending data via USART
	FSR0L <-  main_text1_L0 + main_i_L0
	FARG_Usart_Write+0 <- *FSR0L
	FARG_Usart_Write+0 <- FARG_Usart_Write+0
	CALL _Usart_Write
//part4.c,45 :: 		}
L_main_2:
//part4.c,42 :: 		for (i=0;i<strlen(data[0]);i++)
	main_i_L0 <-  main_i_L0 + 1
	main_i_L0 <- main_i_L0
//part4.c,45 :: 		}
	goto	L_main_0
L_main_1:
//part4.c,46 :: 		Usart_Write(' ');
	FARG_Usart_Write+0 <- 32
	CALL _Usart_Write
//part4.c,47 :: 		text2 =data[1];
	main_text2_L0 <- main_data_L0+2
//part4.c,48 :: 		for (i=0;i<strlen(data[1]);i++)
	main_i_L0 <- 0
L_main_3:
	FARG_strlen+0 <- main_data_L0+2
	CALL _strlen
	if ( main_i_L0 >= STACK_0) then goto L_main_4
//part4.c,50 :: 		Usart_Write(text2[i]);    // Sending data via USART
	FSR0L <-  main_text2_L0 + main_i_L0
	FARG_Usart_Write+0 <- *FSR0L
	FARG_Usart_Write+0 <- FARG_Usart_Write+0
	CALL _Usart_Write
//part4.c,51 :: 		}
L_main_5:
//part4.c,48 :: 		for (i=0;i<strlen(data[1]);i++)
	main_i_L0 <-  main_i_L0 + 1
	main_i_L0 <- main_i_L0
//part4.c,51 :: 		}
	goto	L_main_3
L_main_4:
//part4.c,52 :: 		text3 =data[2];
	main_text3_L0 <- main_data_L0+4
//part4.c,53 :: 		for (i=0;i<strlen(data[2]);i++)
	main_i_L0 <- 0
L_main_6:
	FARG_strlen+0 <- main_data_L0+4
	CALL _strlen
	if ( main_i_L0 >= STACK_0) then goto L_main_7
//part4.c,55 :: 		Usart_Write(text3[i]);    // Sending data via USART
	FSR0L <-  main_text3_L0 + main_i_L0
	FARG_Usart_Write+0 <- *FSR0L
	FARG_Usart_Write+0 <- FARG_Usart_Write+0
	CALL _Usart_Write
//part4.c,56 :: 		}
L_main_8:
//part4.c,53 :: 		for (i=0;i<strlen(data[2]);i++)
	main_i_L0 <-  main_i_L0 + 1
	main_i_L0 <- main_i_L0
//part4.c,56 :: 		}
	goto	L_main_6
L_main_7:
  end

