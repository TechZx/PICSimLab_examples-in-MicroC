;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 11/24/2020 8:04:11 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EF2A	F001			GOTO	_main
$0008	$	_Delay_1us:
;Delays.c,7 :: 			void Delay_1us() {
;Delays.c,8 :: 			Delay_us(1);
$0008	$0000	    			NOP
$000A	$0000	    			NOP
;Delays.c,9 :: 			}
$000C	$0012	    			RETURN
$000E	$	SoftI2C_PutZerosToLAT:
$000E	$0E09	    			MOVLW	9
$0010	$5C15	    			SUBWF	___porti2c, 0, 0
$0012	$6EE1	    			MOVWF	FSR1L, 0
$0014	$0E0F	    			MOVLW	15
$0016	$6EE2	    			MOVWF	FSR1H, 0
$0018	$98E7	    			BCF	INDF1, ____sdai2c, 0
$001A	$96E7	    			BCF	INDF1, ____scli2c, 0
$001C	$0012	    			RETURN
$001E	$	_Soft_I2C_Start:
$001E	$C015	FFE9			MOVFF	___porti2c, FSR0L
$0022	$0E0F	    			MOVLW	15
$0024	$6EEA	    			MOVWF	FSR0H, 0
$0026	$88EF	    			BSF	INDF0, ____sdai2c, 0
$0028	$EC04	F000			CALL	_Delay_1us
$002C	$86EF	    			BSF	INDF0, ____scli2c, 0
$002E	$EC04	F000			CALL	_Delay_1us
$0032	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$0036	$98EF	    			BCF	INDF0, ____sdai2c, 0
$0038	$EC04	F000			CALL	_Delay_1us
$003C	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$0040	$96EF	    			BCF	INDF0, ____scli2c, 0
$0042	$0012	    			RETURN
$0044	$	_Soft_I2C_Write:
$0044	$0E01	    			MOVLW	1
$0046	$6E37	    			MOVWF	Soft_I2C_Write_result_L0, 0
$0048	$0E08	    			MOVLW	8
$004A	$6E36	    			MOVWF	Soft_I2C_Write_temp_L0, 0
$004C	$C015	FFE9			MOVFF	___porti2c, FSR0L
$0050	$0E0F	    			MOVLW	15
$0052	$6EEA	    			MOVWF	FSR0H, 0
$0054	$	L_Soft_I2C_Write_4:
$0054	$5236	    			MOVF	Soft_I2C_Write_temp_L0, 1, 0
$0056	$E022	    			BZ	L_Soft_I2C_Write_5
$0058	$EC04	F000			CALL	_Delay_1us
$005C	$EC04	F000			CALL	_Delay_1us
$0060	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$0064	$96EF	    			BCF	INDF0, ____scli2c, 0
$0066	$EC04	F000			CALL	_Delay_1us
$006A	$5235	    			MOVF	FARG_Soft_I2C_Write+0, 1, 0
$006C	$E000	    			BZ	L_Soft_I2C_Write_6
$006E	$	L_Soft_I2C_Write_6:
$006E	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$0072	$3635	    			RLCF	FARG_soft_i2c_write+0, F, 0
$0074	$A0D8	    			BTFSS	STATUS, 0, 0
$0076	$EF40	F000			GOTO	l_018
$007A	$88EF	    			BSF	INDF0, ____sdai2c, 0
$007C	$EF41	F000			GOTO	l_01C
$0080	$	l_018:
$0080	$98EF	    			BCF	INDF0, ____sdai2c, 0
$0082	$	l_01C:
$0082	$0000	    			NOP
$0084	$EC04	F000			CALL	_Delay_1us
$0088	$86EF	    			BSF	INDF0, ____scli2c, 0
$008A	$0E12	    			MOVLW	18
$008C	$5EE9	    			SUBWF	FSR0L, F, 0
$008E	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$0090	$EF47	F000			GOTO	$-1
$0094	$0E12	    			MOVLW	18
$0096	$26E9	    			ADDWF	FSR0L, F, 0
$0098	$0636	    			DECF	Soft_I2C_Write_temp_L0, 1, 0
$009A	$D7DC	    			BRA	L_Soft_I2C_Write_4
$009C	$	L_Soft_I2C_Write_5:
$009C	$6A37	    			CLRF	Soft_I2C_Write_result_L0, 0
$009E	$EC04	F000			CALL	_Delay_1us
$00A2	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$00A6	$0000	    			NOP
$00A8	$96EF	    			BCF	INDF0, ____scli2c, 0
$00AA	$EC04	F000			CALL	_Delay_1us
$00AE	$88EF	    			BSF	INDF0, ____sdai2c, 0
$00B0	$EC04	F000			CALL	_Delay_1us
$00B4	$EC04	F000			CALL	_Delay_1us
$00B8	$5237	    			MOVF	Soft_I2C_Write_result_L0, 1, 0
$00BA	$E000	    			BZ	L_Soft_I2C_Write_7
$00BC	$	L_Soft_I2C_Write_7:
$00BC	$86EF	    			BSF	INDF0, ____scli2c, 0
$00BE	$0E12	    			MOVLW	18
$00C0	$5EE9	    			SUBWF	FSR0L, F, 0
$00C2	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$00C4	$EF61	F000			GOTO	$-1
$00C8	$6A37	    			CLRF	FLOC_soft_i2c_write+1, 0
$00CA	$EC04	F000			CALL	_Delay_1us
$00CE	$B8EF	    			BTFSC	INDF0, ____sdai2c, 0
$00D0	$8037	    			BSF	FLOC_soft_i2c_write+1, 0, 0
$00D2	$EC04	F000			CALL	_Delay_1us
$00D6	$EC04	F000			CALL	_Delay_1us
$00DA	$EC04	F000			CALL	_Delay_1us
$00DE	$EC04	F000			CALL	_Delay_1us
$00E2	$EC04	F000			CALL	_Delay_1us
$00E6	$EC04	F000			CALL	_Delay_1us
$00EA	$EC04	F000			CALL	_Delay_1us
$00EE	$EC04	F000			CALL	_Delay_1us
$00F2	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$00F6	$0E12	    			MOVLW	18
$00F8	$26E9	    			ADDWF	FSR0L, F, 0
$00FA	$96EF	    			BCF	INDF0, ____scli2c, 0
$00FC	$98EF	    			BCF	INDF0, ____sdai2c, 0
$00FE	$C037	F000			MOVFF	Soft_I2C_Write_result_L0, STACK_0
$0102	$0012	    			RETURN
$0104	$	_Soft_I2C_Stop:
$0104	$C015	FFE9			MOVFF	___porti2c, FSR0L
$0108	$0E0F	    			MOVLW	15
$010A	$6EEA	    			MOVWF	FSR0H, 0
$010C	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$0110	$98EF	    			BCF	INDF0, ____sdai2c, 0
$0112	$EC04	F000			CALL	_Delay_1us
$0116	$86EF	    			BSF	INDF0, ____scli2c, 0
$0118	$0E12	    			MOVLW	18
$011A	$5EE9	    			SUBWF	FSR0L, F, 0
$011C	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$011E	$EF8E	F000			GOTO	$-1
$0122	$0E12	    			MOVLW	18
$0124	$26E9	    			ADDWF	FSR0L, F, 0
$0126	$EC04	F000			CALL	_Delay_1us
$012A	$EC04	F000			CALL	_Delay_1us
$012E	$EC04	F000			CALL	_Delay_1us
$0132	$EC04	F000			CALL	_Delay_1us
$0136	$88EF	    			BSF	INDF0, ____sdai2c, 0
$0138	$EC04	F000			CALL	_Delay_1us
$013C	$0012	    			RETURN
$013E	$	_Soft_I2C_Read:
$013E	$6A36	    			CLRF	Soft_I2C_Read_result_L0, 0
$0140	$0E08	    			MOVLW	8
$0142	$6E37	    			MOVWF	Soft_I2C_Read_temp_L0, 0
$0144	$C015	FFE9			MOVFF	___porti2c, FSR0L
$0148	$0E0F	    			MOVLW	15
$014A	$6EEA	    			MOVWF	FSR0H, 0
$014C	$	L_Soft_I2C_Read_0:
$014C	$5237	    			MOVF	Soft_I2C_Read_temp_L0, 1, 0
$014E	$E01C	    			BZ	L_Soft_I2C_Read_1
$0150	$EC04	F000			CALL	_Delay_1us
$0154	$0000	    			NOP
$0156	$88EF	    			BSF	INDF0, ____sdai2c, 0
$0158	$EC04	F000			CALL	_Delay_1us
$015C	$5236	    			MOVF	Soft_I2C_Read_result_L0, 1, 0
$015E	$E000	    			BZ	L_Soft_I2C_Read_2
$0160	$	L_Soft_I2C_Read_2:
$0160	$86EF	    			BSF	INDF0, ____scli2c, 0
$0162	$0E12	    			MOVLW	18
$0164	$5EE9	    			SUBWF	FSR0L, F, 0
$0166	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$0168	$EFB3	F000			GOTO	$-1
$016C	$B8EF	    			BTFSC	INDF0, ____sdai2c, 0
$016E	$80D8	    			BSF	STATUS, C, 0
$0170	$A8EF	    			BTFSS	INDF0, ____sdai2c, 0
$0172	$90D8	    			BCF	STATUS, C, 0
$0174	$3636	    			RLCF	FLOC_soft_i2c_read+0, F, 0
$0176	$EC04	F000			CALL	_Delay_1us
$017A	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$017E	$0E12	    			MOVLW	18
$0180	$26E9	    			ADDWF	FSR0L, F, 0
$0182	$96EF	    			BCF	INDF0, ____scli2c, 0
$0184	$0637	    			DECF	Soft_I2C_Read_temp_L0, 1, 0
$0186	$D7E2	    			BRA	L_Soft_I2C_Read_0
$0188	$	L_Soft_I2C_Read_1:
$0188	$88EF	    			BSF	INDF0, ____sdai2c, 0
$018A	$EC04	F000			CALL	_Delay_1us
$018E	$5235	    			MOVF	FARG_Soft_I2C_Read+0, 1, 0
$0190	$E002	    			BZ	L_Soft_I2C_Read_3
$0192	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$0196	$	L_Soft_I2C_Read_3:
$0196	$5035	    			MOVF	FARG_soft_i2c_read+0, W, 0
$0198	$B4D8	    			BTFSC	STATUS, 2, 0
$019A	$EFD0	F000			GOTO	L_07C
$019E	$98EF	    			BCF	INDF0, ____sdai2c, 0
$01A0	$	L_07C:
$01A0	$0000	    			NOP
$01A2	$EC04	F000			CALL	_Delay_1us
$01A6	$86EF	    			BSF	INDF0, ____scli2c, 0
$01A8	$0E12	    			MOVLW	18
$01AA	$5EE9	    			SUBWF	FSR0L, F, 0
$01AC	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$01AE	$EFD6	F000			GOTO	$-1
$01B2	$0E12	    			MOVLW	18
$01B4	$26E9	    			ADDWF	FSR0L, F, 0
$01B6	$EC04	F000			CALL	_Delay_1us
$01BA	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$01BE	$96EF	    			BCF	INDF0, ____scli2c, 0
$01C0	$EC04	F000			CALL	_Delay_1us
$01C4	$EC07	F000			CALL	SoftI2C_PutZerosToLAT
$01C8	$98EF	    			BCF	INDF0, ____sdai2c, 0
$01CA	$C036	F000			MOVFF	Soft_I2C_Read_result_L0, STACK_0
$01CE	$0012	    			RETURN
$01D0	$	_strlen:
$01D0	$C035	F037			MOVFF	FARG_strlen+0, strlen_cp_L0
$01D4	$C036	F038			MOVFF	FARG_strlen+1, strlen_cp_L0+1
$01D8	$	L_strlen_33:
$01D8	$C037	FFE9			MOVFF	strlen_cp_L0, FSR0L
$01DC	$C038	FFEA			MOVFF	strlen_cp_L0+1, FSR0L+1
$01E0	$4A37	    			INFSNZ	strlen_cp_L0, 1, 0
$01E2	$2A38	    			INCF	strlen_cp_L0+1, 1, 0
$01E4	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$01E8	$5200	    			MOVF	STACK_0, 1, 0
$01EA	$E1F6	    			BNZ	L_strlen_33
$01EC	$	L_strlen_34:
$01EC	$5035	    			MOVF	FARG_strlen+0, 0, 0
$01EE	$5C37	    			SUBWF	strlen_cp_L0, 0, 0
$01F0	$6E00	    			MOVWF	STACK_0, 0
$01F2	$5036	    			MOVF	FARG_strlen+1, 0, 0
$01F4	$5838	    			SUBWFB	strlen_cp_L0+1, 0, 0
$01F6	$6E01	    			MOVWF	STACK_0+1, 0
$01F8	$0E01	    			MOVLW	1
$01FA	$5E00	    			SUBWF	STACK_0, 1, 0
$01FC	$0E00	    			MOVLW	0
$01FE	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$0200	$0012	    			RETURN
$0202	$	_Usart_Write:
$0202	$	L_Usart_Write_3:
$0202	$6A01	    			CLRF	STACK_1, 0
$0204	$B2AC	    			BTFSC	TXSTA, 1, 0
$0206	$2A01	    			INCF	STACK_1, 1, 0
$0208	$5001	    			MOVF	STACK_1, 0, 0
$020A	$0A00	    			XORLW	0
$020C	$E102	    			BNZ	L_Usart_Write_4
$020E	$0000	    			NOP
$0210	$D7F8	    			BRA	L_Usart_Write_3
$0212	$	L_Usart_Write_4:
$0212	$C035	FFAD			MOVFF	FARG_Usart_Write+0, TXREG
$0216	$0012	    			RETURN
$0218	$	_Soft_I2C_Init:
$0218	$C035	FFE9			MOVFF	FARG_Soft_I2C_Init+0, FSR0L
$021C	$C036	FFEA			MOVFF	FARG_Soft_I2C_Init+1, FSR0H
$0220	$0E12	    			MOVLW	18
$0222	$2435	    			ADDWF	FARG_Soft_I2C_Init+0, 0, 0
$0224	$6E00	    			MOVWF	STACK_0, 0
$0226	$C000	F015			MOVFF	STACK_0, ___porti2c
$022A	$C000	FFE9			MOVFF	STACK_0, FSR0L
$022E	$88EF	    			BSF	INDF0, ____sdai2c, 0
$0230	$86EF	    			BSF	INDF0, ____scli2c, 0
$0232	$0E12	    			MOVLW	18
$0234	$5EE9	    			SUBWF	FSR0L, 1, 0
$0236	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$0238	$EF1B	F001			GOTO	$-1
$023C	$0012	    			RETURN
$023E	$	_Usart_Init:
$023E	$8AAC	    			BSF	TXSTA, 5, 0
$0240	$0E90	    			MOVLW	144
$0242	$6EAB	    			MOVWF	RCSTA, 0
$0244	$8E94	    			BSF	TRISC, 7, 0
$0246	$9C94	    			BCF	TRISC, 6, 0
$0248	$	L_Usart_Init_0:
$0248	$AA9E	    			BTFSS	PIR1, 5, 0
$024A	$D003	    			BRA	L_Usart_Init_1
$024C	$CFAE	F039			MOVFF	RCREG, Usart_Init_tmp_L0
$0250	$D7FB	    			BRA	L_Usart_Init_0
$0252	$	L_Usart_Init_1:
$0252	$0012	    			RETURN
$0254	$	_main:
$0254	$0E48	    			MOVLW	72
$0256	$6E16	    			MOVWF	lstr1_part4+0, 0
$0258	$0E65	    			MOVLW	101
$025A	$6E17	    			MOVWF	lstr1_part4+1, 0
$025C	$0E6C	    			MOVLW	108
$025E	$6E18	    			MOVWF	lstr1_part4+2, 0
$0260	$0E6C	    			MOVLW	108
$0262	$6E19	    			MOVWF	lstr1_part4+3, 0
$0264	$0E6F	    			MOVLW	111
$0266	$6E1A	    			MOVWF	lstr1_part4+4, 0
$0268	$6A1B	    			CLRF	lstr1_part4+5, 0
$026A	$0E57	    			MOVLW	87
$026C	$6E1C	    			MOVWF	lstr2_part4+0, 0
$026E	$0E6F	    			MOVLW	111
$0270	$6E1D	    			MOVWF	lstr2_part4+1, 0
$0272	$0E72	    			MOVLW	114
$0274	$6E1E	    			MOVWF	lstr2_part4+2, 0
$0276	$0E6C	    			MOVLW	108
$0278	$6E1F	    			MOVWF	lstr2_part4+3, 0
$027A	$0E64	    			MOVLW	100
$027C	$6E20	    			MOVWF	lstr2_part4+4, 0
$027E	$6A21	    			CLRF	lstr2_part4+5, 0
$0280	$0E54	    			MOVLW	84
$0282	$6E22	    			MOVWF	lstr3_part4+0, 0
$0284	$0E65	    			MOVLW	101
$0286	$6E23	    			MOVWF	lstr3_part4+1, 0
$0288	$0E73	    			MOVLW	115
$028A	$6E24	    			MOVWF	lstr3_part4+2, 0
$028C	$0E74	    			MOVLW	116
$028E	$6E25	    			MOVWF	lstr3_part4+3, 0
$0290	$6A26	    			CLRF	lstr3_part4+4, 0
;part4.c,8 :: 			void main(){
;part4.c,11 :: 			INTCON=0;
$0292	$6AF2	    			CLRF	INTCON, 0
;part4.c,12 :: 			TRISE =0;
$0294	$6A96	    			CLRF	TRISE, 0
;part4.c,13 :: 			TRISD =0;
$0296	$6A95	    			CLRF	TRISD, 0
;part4.c,14 :: 			TRISB =0;
$0298	$6A93	    			CLRF	TRISB, 0
;part4.c,15 :: 			Soft_I2C_Config(&PORTC, 4, 3); //Use PortC pins 4 and 3
$029A	$0E82	    			MOVLW	PORTC
$029C	$6E35	    			MOVWF	FARG_Soft_I2C_Init+0, 0
$029E	$0E0F	    			MOVLW	@PORTC
$02A0	$6E36	    			MOVWF	FARG_Soft_I2C_Init+1, 0
$02A2	$EC0C	F001			CALL	_Soft_I2C_Init
;part4.c,17 :: 			TRISB =0x00;
$02A6	$6A93	    			CLRF	TRISB, 0
;part4.c,18 :: 			PORTB =0x00;
$02A8	$6A81	    			CLRF	PORTB, 0
;part4.c,20 :: 			Soft_I2C_Start(); // Issue I2C start signal
$02AA	$EC0F	F000			CALL	_Soft_I2C_Start
;part4.c,21 :: 			Soft_I2C_Write(0xA2); // Send byte via I2C (Address of 24cO2)
$02AE	$0EA2	    			MOVLW	162
$02B0	$6E35	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$02B2	$EC22	F000			CALL	_Soft_I2C_Write
;part4.c,22 :: 			Soft_I2C_Write(3); // Send byte (address of EEPROM location)
$02B6	$0E03	    			MOVLW	3
$02B8	$6E35	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$02BA	$EC22	F000			CALL	_Soft_I2C_Write
;part4.c,24 :: 			Soft_I2C_Write("Hello");
$02BE	$0E16	    			MOVLW	lstr1_part4
$02C0	$6E35	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$02C2	$EC22	F000			CALL	_Soft_I2C_Write
;part4.c,25 :: 			Soft_I2C_Write("World");
$02C6	$0E1C	    			MOVLW	lstr2_part4
$02C8	$6E35	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$02CA	$EC22	F000			CALL	_Soft_I2C_Write
;part4.c,26 :: 			Soft_I2C_Write("Test");
$02CE	$0E22	    			MOVLW	lstr3_part4
$02D0	$6E35	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$02D2	$EC22	F000			CALL	_Soft_I2C_Write
;part4.c,27 :: 			Soft_I2C_Stop();
$02D6	$EC82	F000			CALL	_Soft_I2C_Stop
;part4.c,29 :: 			Soft_I2C_Start(); // Issue I2C start signal
$02DA	$EC0F	F000			CALL	_Soft_I2C_Start
;part4.c,30 :: 			Soft_I2C_Write(0xA2); // Send byte (device address + W)
$02DE	$0EA2	    			MOVLW	162
$02E0	$6E35	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$02E2	$EC22	F000			CALL	_Soft_I2C_Write
;part4.c,31 :: 			Soft_I2C_Write(3); // Send byte (EEPROM location to read from)
$02E6	$0E03	    			MOVLW	3
$02E8	$6E35	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$02EA	$EC22	F000			CALL	_Soft_I2C_Write
;part4.c,32 :: 			Soft_I2C_Start(); // Issue I2C start signal
$02EE	$EC0F	F000			CALL	_Soft_I2C_Start
;part4.c,33 :: 			Soft_I2C_Stop();
$02F2	$EC82	F000			CALL	_Soft_I2C_Stop
;part4.c,34 :: 			data[0] = Soft_I2C_Read(1); // Read data (send ACK)
$02F6	$0E01	    			MOVLW	1
$02F8	$6E35	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$02FA	$EC9F	F000			CALL	_Soft_I2C_Read
$02FE	$C000	F02D			MOVFF	STACK_0, main_data_L0
$0302	$0E00	    			MOVLW	0
$0304	$6E2E	    			MOVWF	main_data_L0+1, 0
;part4.c,35 :: 			data[1] = Soft_I2C_Read(1); // Read data (send ACK)
$0306	$0E01	    			MOVLW	1
$0308	$6E35	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$030A	$EC9F	F000			CALL	_Soft_I2C_Read
$030E	$C000	F02F			MOVFF	STACK_0, main_data_L0+2
$0312	$0E00	    			MOVLW	0
$0314	$6E30	    			MOVWF	main_data_L0+3, 0
;part4.c,36 :: 			data[2] = Soft_I2C_Read(1); // Read data (send ACK)
$0316	$0E01	    			MOVLW	1
$0318	$6E35	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$031A	$EC9F	F000			CALL	_Soft_I2C_Read
$031E	$C000	F031			MOVFF	STACK_0, main_data_L0+4
$0322	$0E00	    			MOVLW	0
$0324	$6E32	    			MOVWF	main_data_L0+5, 0
;part4.c,37 :: 			data[3] = Soft_I2C_Read(0); // Read data (NO ACK)
$0326	$6A35	    			CLRF	FARG_Soft_I2C_Read+0, 0
$0328	$EC9F	F000			CALL	_Soft_I2C_Read
$032C	$C000	F033			MOVFF	STACK_0, main_data_L0+6
$0330	$0E00	    			MOVLW	0
$0332	$6E34	    			MOVWF	main_data_L0+7, 0
;part4.c,38 :: 			Soft_I2C_Stop();
$0334	$EC82	F000			CALL	_Soft_I2C_Stop
;part4.c,40 :: 			Usart_Init(9600);
$0338	$0E33	    			MOVLW	51
$033A	$6EAF	    			MOVWF	SPBRG, 0
$033C	$84AC	    			BSF	TXSTA, BRGH, 0
$033E	$EC1F	F001			CALL	_Usart_Init
;part4.c,41 :: 			text1 =data[0];
$0342	$C02D	F027			MOVFF	main_data_L0, main_text1_L0
$0346	$C02E	F028			MOVFF	main_data_L0+1, main_text1_L0+1
;part4.c,42 :: 			for (i=0;i<strlen(data[0]);i++)
$034A	$6A33	    			CLRF	main_i_L0, 0
$034C	$6A34	    			CLRF	main_i_L0+1, 0
$034E	$	L_main_0:
$034E	$C02D	F035			MOVFF	main_data_L0, FARG_strlen+0
$0352	$C02E	F036			MOVFF	main_data_L0+1, FARG_strlen+1
$0356	$ECE8	F000			CALL	_strlen
$035A	$0E80	    			MOVLW	128
$035C	$1834	    			XORWF	main_i_L0+1, 0, 0
$035E	$6E02	    			MOVWF	STACK_2, 0
$0360	$0E80	    			MOVLW	128
$0362	$1801	    			XORWF	STACK_0+1, 0, 0
$0364	$5C02	    			SUBWF	STACK_2, 0, 0
$0366	$E102	    			BNZ	L_main_9
$0368	$5000	    			MOVF	STACK_0, 0, 0
$036A	$5C33	    			SUBWF	main_i_L0, 0, 0
$036C	$	L_main_9:
$036C	$E20D	    			BC	L_main_1
;part4.c,44 :: 			Usart_Write(text1[i]);    // Sending data via USART
$036E	$5033	    			MOVF	main_i_L0, 0, 0
$0370	$2427	    			ADDWF	main_text1_L0, 0, 0
$0372	$6EE9	    			MOVWF	FSR0L, 0
$0374	$5034	    			MOVF	main_i_L0+1, 0, 0
$0376	$2028	    			ADDWFC	main_text1_L0+1, 0, 0
$0378	$6EEA	    			MOVWF	FSR0L+1, 0
$037A	$CFEE	F035			MOVFF	POSTINC0, FARG_Usart_Write+0
$037E	$EC01	F001			CALL	_Usart_Write
;part4.c,45 :: 			}
$0382	$	L_main_2:
;part4.c,42 :: 			for (i=0;i<strlen(data[0]);i++)
$0382	$4A33	    			INFSNZ	main_i_L0, 1, 0
$0384	$2A34	    			INCF	main_i_L0+1, 1, 0
;part4.c,45 :: 			}
$0386	$D7E3	    			BRA	L_main_0
$0388	$	L_main_1:
;part4.c,46 :: 			Usart_Write(' ');
$0388	$0E20	    			MOVLW	32
$038A	$6E35	    			MOVWF	FARG_Usart_Write+0, 0
$038C	$EC01	F001			CALL	_Usart_Write
;part4.c,47 :: 			text2 =data[1];
$0390	$C02F	F029			MOVFF	main_data_L0+2, main_text2_L0
$0394	$C030	F02A			MOVFF	main_data_L0+3, main_text2_L0+1
;part4.c,48 :: 			for (i=0;i<strlen(data[1]);i++)
$0398	$6A33	    			CLRF	main_i_L0, 0
$039A	$6A34	    			CLRF	main_i_L0+1, 0
$039C	$	L_main_3:
$039C	$C02F	F035			MOVFF	main_data_L0+2, FARG_strlen+0
$03A0	$C030	F036			MOVFF	main_data_L0+3, FARG_strlen+1
$03A4	$ECE8	F000			CALL	_strlen
$03A8	$0E80	    			MOVLW	128
$03AA	$1834	    			XORWF	main_i_L0+1, 0, 0
$03AC	$6E02	    			MOVWF	STACK_2, 0
$03AE	$0E80	    			MOVLW	128
$03B0	$1801	    			XORWF	STACK_0+1, 0, 0
$03B2	$5C02	    			SUBWF	STACK_2, 0, 0
$03B4	$E102	    			BNZ	L_main_10
$03B6	$5000	    			MOVF	STACK_0, 0, 0
$03B8	$5C33	    			SUBWF	main_i_L0, 0, 0
$03BA	$	L_main_10:
$03BA	$E20D	    			BC	L_main_4
;part4.c,50 :: 			Usart_Write(text2[i]);    // Sending data via USART
$03BC	$5033	    			MOVF	main_i_L0, 0, 0
$03BE	$2429	    			ADDWF	main_text2_L0, 0, 0
$03C0	$6EE9	    			MOVWF	FSR0L, 0
$03C2	$5034	    			MOVF	main_i_L0+1, 0, 0
$03C4	$202A	    			ADDWFC	main_text2_L0+1, 0, 0
$03C6	$6EEA	    			MOVWF	FSR0L+1, 0
$03C8	$CFEE	F035			MOVFF	POSTINC0, FARG_Usart_Write+0
$03CC	$EC01	F001			CALL	_Usart_Write
;part4.c,51 :: 			}
$03D0	$	L_main_5:
;part4.c,48 :: 			for (i=0;i<strlen(data[1]);i++)
$03D0	$4A33	    			INFSNZ	main_i_L0, 1, 0
$03D2	$2A34	    			INCF	main_i_L0+1, 1, 0
;part4.c,51 :: 			}
$03D4	$D7E3	    			BRA	L_main_3
$03D6	$	L_main_4:
;part4.c,52 :: 			text3 =data[2];
$03D6	$C031	F02B			MOVFF	main_data_L0+4, main_text3_L0
$03DA	$C032	F02C			MOVFF	main_data_L0+5, main_text3_L0+1
;part4.c,53 :: 			for (i=0;i<strlen(data[2]);i++)
$03DE	$6A33	    			CLRF	main_i_L0, 0
$03E0	$6A34	    			CLRF	main_i_L0+1, 0
$03E2	$	L_main_6:
$03E2	$C031	F035			MOVFF	main_data_L0+4, FARG_strlen+0
$03E6	$C032	F036			MOVFF	main_data_L0+5, FARG_strlen+1
$03EA	$ECE8	F000			CALL	_strlen
$03EE	$0E80	    			MOVLW	128
$03F0	$1834	    			XORWF	main_i_L0+1, 0, 0
$03F2	$6E02	    			MOVWF	STACK_2, 0
$03F4	$0E80	    			MOVLW	128
$03F6	$1801	    			XORWF	STACK_0+1, 0, 0
$03F8	$5C02	    			SUBWF	STACK_2, 0, 0
$03FA	$E102	    			BNZ	L_main_11
$03FC	$5000	    			MOVF	STACK_0, 0, 0
$03FE	$5C33	    			SUBWF	main_i_L0, 0, 0
$0400	$	L_main_11:
$0400	$E20D	    			BC	L_main_7
;part4.c,55 :: 			Usart_Write(text3[i]);    // Sending data via USART
$0402	$5033	    			MOVF	main_i_L0, 0, 0
$0404	$242B	    			ADDWF	main_text3_L0, 0, 0
$0406	$6EE9	    			MOVWF	FSR0L, 0
$0408	$5034	    			MOVF	main_i_L0+1, 0, 0
$040A	$202C	    			ADDWFC	main_text3_L0+1, 0, 0
$040C	$6EEA	    			MOVWF	FSR0L+1, 0
$040E	$CFEE	F035			MOVFF	POSTINC0, FARG_Usart_Write+0
$0412	$EC01	F001			CALL	_Usart_Write
;part4.c,56 :: 			}
$0416	$	L_main_8:
;part4.c,53 :: 			for (i=0;i<strlen(data[2]);i++)
$0416	$4A33	    			INFSNZ	main_i_L0, 1, 0
$0418	$2A34	    			INCF	main_i_L0+1, 1, 0
;part4.c,56 :: 			}
$041A	$D7E3	    			BRA	L_main_6
$041C	$	L_main_7:
;part4.c,57 :: 			}
$041C	$D7FF	    			BRA	$
