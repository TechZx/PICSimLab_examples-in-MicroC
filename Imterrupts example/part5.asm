;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 24-Jun-20 10:39:08 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EFF9	F001			GOTO	_main
$0008	$EF3E	F000			GOTO	_interrupt
$007C	$	_interrupt:
$007C	$C001	F05E			MOVFF	STACK_1, STSAVED_1
$0080	$C000	F05D			MOVFF	STACK_0, STSAVED_0
$0084	$CFE9	F01C			MOVFF	FSR0L, ?saveFSR0
$0088	$CFEA	F01D			MOVFF	FSR0H, ?saveFSR0+1
$008C	$CFE1	F01E			MOVFF	FSR1L, ?saveFSR1
$0090	$CFE2	F01F			MOVFF	FSR1H, ?saveFSR1+1
;part5.c,4 :: 			void interrupt()      //settting an inetrupt high priority for the ventilator
;part5.c,6 :: 			if(PORTC.F2 ==0)
$0094	$6A01	    			CLRF	STACK_1, 0
$0096	$B482	    			BTFSC	PORTC, 2, 0
$0098	$2A01	    			INCF	STACK_1, 1, 0
$009A	$5001	    			MOVF	STACK_1, 0, 0
$009C	$0A00	    			XORLW	0
$009E	$B4D8	    			BTFSC	STATUS, Z, 0
;part5.c,7 :: 			PORTC.F2 =1;          //turn on ventilator
$00A0	$8482	    			BSF	PORTC, 2, 0
$00A2	$	L_interrupt_0:
;part5.c,8 :: 			INTCON =  0b11010000;
$00A2	$0ED0	    			MOVLW	208
$00A4	$6EF2	    			MOVWF	INTCON, 0
;part5.c,9 :: 			}
$00A6	$	L_Interrupt_end:
$00A6	$C01C	FFE9			MOVFF	?saveFSR0, FSR0L
$00AA	$C01D	FFEA			MOVFF	?saveFSR0+1, FSR0H
$00AE	$C01E	FFE1			MOVFF	?saveFSR1, FSR1L
$00B2	$C01F	FFE2			MOVFF	?saveFSR1+1, FSR1H
$00B6	$C05E	F001			MOVFF	STSAVED_1, STACK_1
$00BA	$C05D	F000			MOVFF	STSAVED_0, STACK_0
$00BE	$0011	    			RETFIE
$0018	$	_interrupt_low:
$0018	$C001	F060			MOVFF	STACK_1, LOW_STSAVED_1
$001C	$C000	F05F			MOVFF	STACK_0, LOW_STSAVED_0
$0020	$CFE8	F020			MOVFF	WREG, ?Low_saveWERG
$0024	$CFD8	F021			MOVFF	STATUS, ?Low_saveSTATUS
$0028	$CFE0	F022			MOVFF	BSR, ?Low_saveBSR
$002C	$CFE9	F01C			MOVFF	FSR0L, ?saveFSR0
$0030	$CFEA	F01D			MOVFF	FSR0H, ?saveFSR0+1
$0034	$CFE1	F01E			MOVFF	FSR1L, ?saveFSR1
$0038	$CFE2	F01F			MOVFF	FSR1H, ?saveFSR1+1
;part5.c,10 :: 			void interrupt_low()               // setting a low priority interupt for relay and buzzer
;part5.c,12 :: 			if(PORTC.F0 ==0)
$003C	$0E01	    			MOVLW	1
$003E	$1482	    			ANDWF	PORTC, 0, 0
$0040	$6E01	    			MOVWF	STACK_1, 0
$0042	$5001	    			MOVF	STACK_1, 0, 0
$0044	$0A00	    			XORLW	0
$0046	$E104	    			BNZ	L_interrupt_low_1
;part5.c,14 :: 			PORTC.F0 =1;
$0048	$8082	    			BSF	PORTC, 0, 0
;part5.c,15 :: 			INTCON3 = 0b00010000; }      //turn on  relay
$004A	$0E10	    			MOVLW	16
$004C	$6EF0	    			MOVWF	INTCON3, 0
$004E	$D003	    			BRA	L_interrupt_low_2
$0050	$	L_interrupt_low_1:
;part5.c,18 :: 			PORTC.F1=0;
$0050	$9282	    			BCF	PORTC, 1, 0
;part5.c,20 :: 			INTCON3 = 0b00011000;  }          //turn on buzzer
$0052	$0E18	    			MOVLW	24
$0054	$6EF0	    			MOVWF	INTCON3, 0
$0056	$	L_interrupt_low_2:
;part5.c,21 :: 			}
$0056	$	L_Low_Interrupt_end:
$0056	$C020	FFE8			MOVFF	?Low_saveWERG, WREG
$005A	$C021	FFD8			MOVFF	?Low_saveSTATUS, STATUS
$005E	$C022	FFE0			MOVFF	?Low_saveBSR, BSR
$0062	$C01C	FFE9			MOVFF	?saveFSR0, FSR0L
$0066	$C01D	FFEA			MOVFF	?saveFSR0+1, FSR0H
$006A	$C01E	FFE1			MOVFF	?saveFSR1, FSR1L
$006E	$C01F	FFE2			MOVFF	?saveFSR1+1, FSR1H
$0072	$C060	F001			MOVFF	LOW_STSAVED_1, STACK_1
$0076	$C05F	F000			MOVFF	LOW_STSAVED_0, STACK_0
$007A	$0010	    			RETFIE	0
$000C	$	_Delay_1us:
$000C	$0000	    			NOP
$000E	$0000	    			NOP
$0010	$0012	    			RETURN
$00C0	$	_Delay_5500us:
$00C0	$0E0F	    			MOVLW	15
$00C2	$6E0B	    			MOVWF	STACK_11, 0
$00C4	$0EFF	    			MOVLW	255
$00C6	$6E0A	    			MOVWF	STACK_10, 0
$00C8	$2E0B	    			DECFSZ	STACK_11, F, 0
$00CA	$D001	    			BRA	$+2
$00CC	$D003	    			BRA	$+4
$00CE	$2E0A	    			DECFSZ	STACK_10, F, 0
$00D0	$D7FE	    			BRA	$-1
$00D2	$D7FA	    			BRA	$-5
$00D4	$0E3E	    			MOVLW	62
$00D6	$6E0A	    			MOVWF	STACK_10, 0
$00D8	$2E0A	    			DECFSZ	STACK_10, F, 0
$00DA	$D7FE	    			BRA	$-1
$00DC	$0000	    			NOP
$00DE	$0012	    			RETURN
$00E0	$	_Delay_50us:
$00E0	$0E21	    			MOVLW	33
$00E2	$6E0A	    			MOVWF	STACK_10, 0
$00E4	$2E0A	    			DECFSZ	STACK_10, F, 0
$00E6	$D7FE	    			BRA	$-1
$00E8	$0012	    			RETURN
$00EA	$	_Lcd8_Cmd:
$00EA	$C015	FFE9			MOVFF	Lcd8bit_main_global_dataAddress, FSR0L
$00EE	$C016	FFEA			MOVFF	Lcd8bit_main_global_dataAddress+1, FSR0H
$00F2	$C017	FFE1			MOVFF	Lcd8bit_main_global_ctrlAddress, FSR1L
$00F6	$C018	FFE2			MOVFF	Lcd8bit_main_global_ctrlAddress+1, FSR1H
$00FA	$6AEF	    			CLRF	INDF0, 0
$00FC	$525C	    			MOVF	FARG_Lcd8_Cmd+0, 1, 0
$00FE	$E000	    			BZ	L_Lcd8_Cmd_0
$0100	$	L_Lcd8_Cmd_0:
$0100	$BE5C	    			BTFSC	FARG_Lcd8_Cmd+0, 7, 0
$0102	$8EEF	    			BSF	INDF0, __LCD8_DB7, 0
$0104	$BC5C	    			BTFSC	FARG_Lcd8_Cmd+0, 6, 0
$0106	$8CEF	    			BSF	INDF0, __LCD8_DB6, 0
$0108	$BA5C	    			BTFSC	FARG_Lcd8_Cmd+0, 5, 0
$010A	$8AEF	    			BSF	INDF0, __LCD8_DB5, 0
$010C	$B85C	    			BTFSC	FARG_Lcd8_Cmd+0, 4, 0
$010E	$88EF	    			BSF	INDF0, __LCD8_DB4, 0
$0110	$B65C	    			BTFSC	FARG_Lcd8_Cmd+0, 3, 0
$0112	$86EF	    			BSF	INDF0, __LCD8_DB3, 0
$0114	$B45C	    			BTFSC	FARG_Lcd8_Cmd+0, 2, 0
$0116	$84EF	    			BSF	INDF0, __LCD8_DB2, 0
$0118	$B25C	    			BTFSC	FARG_Lcd8_Cmd+0, 1, 0
$011A	$82EF	    			BSF	INDF0, __LCD8_DB1, 0
$011C	$B05C	    			BTFSC	FARG_Lcd8_Cmd+0, 0, 0
$011E	$80EF	    			BSF	INDF0, __LCD8_DB0, 0
$0120	$5019	    			MOVF	Lcd8bit_main_global_cmd, 0, 0
$0122	$0A01	    			XORLW	1
$0124	$E103	    			BNZ	L_Lcd8_Cmd_1
$0126	$94E7	    			BCF	INDF1, __LCD8_RS, 0
$0128	$EF97	F000			GOTO	L_Lcd8_Cmd_2
$012C	$	L_Lcd8_Cmd_1:
$012C	$84E7	    			BSF	INDF1, __LCD8_RS, 0
$012E	$	L_Lcd8_Cmd_2:
$012E	$82E7	    			BSF	INDF1, __LCD8_ENABLE, 0
$0130	$EC06	F000			CALL	_Delay_1us
$0134	$92E7	    			BCF	INDF1, __LCD8_ENABLE, 0
$0136	$5019	    			MOVF	Lcd8bit_main_global_cmd, 0, 0
$0138	$0A01	    			XORLW	1
$013A	$E103	    			BNZ	L_Lcd8_Cmd_3
$013C	$EC60	F000			CALL	_Delay_5500us
$0140	$D002	    			BRA	L_Lcd8_Cmd_4
$0142	$	L_Lcd8_Cmd_3:
$0142	$EC70	F000			CALL	_Delay_50us
$0146	$	L_Lcd8_Cmd_4:
$0146	$0012	    			RETURN
$0148	$	_read_keypad:
;part5.c,22 :: 			char  read_keypad()
;part5.c,25 :: 			PORTD = 0xFF;
$0148	$0EFF	    			MOVLW	255
$014A	$6E83	    			MOVWF	PORTD, 0
;part5.c,26 :: 			TRISD = 0xFF;    //configure PORT D as inpout
$014C	$0EFF	    			MOVLW	255
$014E	$6E95	    			MOVWF	TRISD, 0
;part5.c,27 :: 			TRISB = 0x00;     //configure PORT B as outpout
$0150	$6A93	    			CLRF	TRISB, 0
;part5.c,28 :: 			PORTB = 0xFF;     //set all pins of PORT B to 1;
$0152	$0EFF	    			MOVLW	255
$0154	$6E81	    			MOVWF	PORTB, 0
;part5.c,29 :: 			key =0;
$0156	$6A58	    			CLRF	read_keypad_key_L0, 0
;part5.c,30 :: 			do {                       //1-5 buttons
$0158	$	L_read_keypad_3:
;part5.c,32 :: 			PORTB.F0 = 0;
$0158	$9081	    			BCF	PORTB, 0, 0
;part5.c,33 :: 			delay_ms(10);
$015A	$0E1A	    			MOVLW	26
$015C	$6E0B	    			MOVWF	STACK_11, 0
$015E	$0EFF	    			MOVLW	255
$0160	$6E0A	    			MOVWF	STACK_10, 0
$0162	$2E0B	    			DECFSZ	STACK_11, F, 0
$0164	$D001	    			BRA	$+2
$0166	$D003	    			BRA	$+4
$0168	$2E0A	    			DECFSZ	STACK_10, F, 0
$016A	$D7FE	    			BRA	$-1
$016C	$D7FA	    			BRA	$-5
$016E	$0EE7	    			MOVLW	231
$0170	$6E0A	    			MOVWF	STACK_10, 0
$0172	$2E0A	    			DECFSZ	STACK_10, F, 0
$0174	$D7FE	    			BRA	$-1
$0176	$0000	    			NOP
;part5.c,34 :: 			var = PORTD;
$0178	$CF83	F057			MOVFF	PORTD, read_keypad_var_L0
;part5.c,36 :: 			if (var.F2 == 0) key = '4';
$017C	$6A01	    			CLRF	STACK_1, 0
$017E	$B457	    			BTFSC	read_keypad_var_L0, 2, 0
$0180	$2A01	    			INCF	STACK_1, 1, 0
$0182	$5001	    			MOVF	STACK_1, 0, 0
$0184	$0A00	    			XORLW	0
$0186	$E103	    			BNZ	L_read_keypad_5
$0188	$0E34	    			MOVLW	52
$018A	$6E58	    			MOVWF	read_keypad_key_L0, 0
$018C	$D008	    			BRA	L_read_keypad_6
$018E	$	L_read_keypad_5:
;part5.c,37 :: 			else if (var.F3 == 0) key = '1';
$018E	$6A01	    			CLRF	STACK_1, 0
$0190	$B657	    			BTFSC	read_keypad_var_L0, 3, 0
$0192	$2A01	    			INCF	STACK_1, 1, 0
$0194	$5001	    			MOVF	STACK_1, 0, 0
$0196	$0A00	    			XORLW	0
$0198	$E102	    			BNZ	L_read_keypad_7
$019A	$0E31	    			MOVLW	49
$019C	$6E58	    			MOVWF	read_keypad_key_L0, 0
$019E	$	L_read_keypad_7:
$019E	$	L_read_keypad_6:
;part5.c,38 :: 			PORTB.F0 =1;
$019E	$8081	    			BSF	PORTB, 0, 0
;part5.c,41 :: 			PORTB.F1 = 0;
$01A0	$9281	    			BCF	PORTB, 1, 0
;part5.c,42 :: 			delay_ms(10);
$01A2	$0E1A	    			MOVLW	26
$01A4	$6E0B	    			MOVWF	STACK_11, 0
$01A6	$0EFF	    			MOVLW	255
$01A8	$6E0A	    			MOVWF	STACK_10, 0
$01AA	$2E0B	    			DECFSZ	STACK_11, F, 0
$01AC	$D001	    			BRA	$+2
$01AE	$D003	    			BRA	$+4
$01B0	$2E0A	    			DECFSZ	STACK_10, F, 0
$01B2	$D7FE	    			BRA	$-1
$01B4	$D7FA	    			BRA	$-5
$01B6	$0EE7	    			MOVLW	231
$01B8	$6E0A	    			MOVWF	STACK_10, 0
$01BA	$2E0A	    			DECFSZ	STACK_10, F, 0
$01BC	$D7FE	    			BRA	$-1
$01BE	$0000	    			NOP
;part5.c,43 :: 			var = PORTD;
$01C0	$CF83	F057			MOVFF	PORTD, read_keypad_var_L0
;part5.c,45 :: 			if (var.F2 == 0)key = '5';
$01C4	$6A01	    			CLRF	STACK_1, 0
$01C6	$B457	    			BTFSC	read_keypad_var_L0, 2, 0
$01C8	$2A01	    			INCF	STACK_1, 1, 0
$01CA	$5001	    			MOVF	STACK_1, 0, 0
$01CC	$0A00	    			XORLW	0
$01CE	$E103	    			BNZ	L_read_keypad_8
$01D0	$0E35	    			MOVLW	53
$01D2	$6E58	    			MOVWF	read_keypad_key_L0, 0
$01D4	$D008	    			BRA	L_read_keypad_9
$01D6	$	L_read_keypad_8:
;part5.c,46 :: 			else if (var.F3 == 0)key = '2';
$01D6	$6A01	    			CLRF	STACK_1, 0
$01D8	$B657	    			BTFSC	read_keypad_var_L0, 3, 0
$01DA	$2A01	    			INCF	STACK_1, 1, 0
$01DC	$5001	    			MOVF	STACK_1, 0, 0
$01DE	$0A00	    			XORLW	0
$01E0	$E102	    			BNZ	L_read_keypad_10
$01E2	$0E32	    			MOVLW	50
$01E4	$6E58	    			MOVWF	read_keypad_key_L0, 0
$01E6	$	L_read_keypad_10:
$01E6	$	L_read_keypad_9:
;part5.c,47 :: 			PORTB.F1 =1;
$01E6	$8281	    			BSF	PORTB, 1, 0
;part5.c,50 :: 			PORTB.F2 =0;
$01E8	$9481	    			BCF	PORTB, 2, 0
;part5.c,51 :: 			delay_ms(10);
$01EA	$0E1A	    			MOVLW	26
$01EC	$6E0B	    			MOVWF	STACK_11, 0
$01EE	$0EFF	    			MOVLW	255
$01F0	$6E0A	    			MOVWF	STACK_10, 0
$01F2	$2E0B	    			DECFSZ	STACK_11, F, 0
$01F4	$D001	    			BRA	$+2
$01F6	$D003	    			BRA	$+4
$01F8	$2E0A	    			DECFSZ	STACK_10, F, 0
$01FA	$D7FE	    			BRA	$-1
$01FC	$D7FA	    			BRA	$-5
$01FE	$0EE7	    			MOVLW	231
$0200	$6E0A	    			MOVWF	STACK_10, 0
$0202	$2E0A	    			DECFSZ	STACK_10, F, 0
$0204	$D7FE	    			BRA	$-1
$0206	$0000	    			NOP
;part5.c,52 :: 			var = PORTD;
$0208	$CF83	F057			MOVFF	PORTD, read_keypad_var_L0
;part5.c,54 :: 			if (var.F3 == 0) key = '3';
$020C	$6A01	    			CLRF	STACK_1, 0
$020E	$B657	    			BTFSC	read_keypad_var_L0, 3, 0
$0210	$2A01	    			INCF	STACK_1, 1, 0
$0212	$5001	    			MOVF	STACK_1, 0, 0
$0214	$0A00	    			XORLW	0
$0216	$E102	    			BNZ	L_read_keypad_11
$0218	$0E33	    			MOVLW	51
$021A	$6E58	    			MOVWF	read_keypad_key_L0, 0
$021C	$	L_read_keypad_11:
;part5.c,55 :: 			PORTB.F2 =1;
$021C	$8481	    			BSF	PORTB, 2, 0
;part5.c,57 :: 			}while (key == 0);
$021E	$5058	    			MOVF	read_keypad_key_L0, 0, 0
$0220	$0A00	    			XORLW	0
$0222	$E09A	    			BZ	L_read_keypad_3
$0224	$	L_read_keypad_4:
;part5.c,59 :: 			return key;
$0224	$C058	F000			MOVFF	read_keypad_key_L0, STACK_0
;part5.c,60 :: 			}
$0228	$0012	    			RETURN
$022A	$	_function_numbers:
;part5.c,62 :: 			unsigned char function_numbers(unsigned char v)
;part5.c,64 :: 			switch(v)
$022A	$D00F	    			BRA	L_function_numbers_12
;part5.c,66 :: 			case 1:
$022C	$	L_function_numbers_14:
;part5.c,67 :: 			return 0x06;
$022C	$0E06	    			MOVLW	6
$022E	$6E00	    			MOVWF	STACK_0, 0
$0230	$0012	    			RETURN
;part5.c,68 :: 			case 2:
$0232	$	L_function_numbers_15:
;part5.c,69 :: 			return 0x5B;
$0232	$0E5B	    			MOVLW	91
$0234	$6E00	    			MOVWF	STACK_0, 0
$0236	$0012	    			RETURN
;part5.c,70 :: 			case 3:
$0238	$	L_function_numbers_16:
;part5.c,71 :: 			return 0x4F;
$0238	$0E4F	    			MOVLW	79
$023A	$6E00	    			MOVWF	STACK_0, 0
$023C	$0012	    			RETURN
;part5.c,72 :: 			case 4:
$023E	$	L_function_numbers_17:
;part5.c,73 :: 			return 0x66;
$023E	$0E66	    			MOVLW	102
$0240	$6E00	    			MOVWF	STACK_0, 0
$0242	$0012	    			RETURN
;part5.c,74 :: 			case 5:
$0244	$	L_function_numbers_18:
;part5.c,75 :: 			return 0x6D;
$0244	$0E6D	    			MOVLW	109
$0246	$6E00	    			MOVWF	STACK_0, 0
$0248	$0012	    			RETURN
;part5.c,76 :: 			}
$024A	$	L_function_numbers_12:
$024A	$5057	    			MOVF	FARG_function_numbers+0, 0, 0
$024C	$0A01	    			XORLW	1
$024E	$E0EE	    			BZ	L_function_numbers_14
$0250	$5057	    			MOVF	FARG_function_numbers+0, 0, 0
$0252	$0A02	    			XORLW	2
$0254	$E0EE	    			BZ	L_function_numbers_15
$0256	$5057	    			MOVF	FARG_function_numbers+0, 0, 0
$0258	$0A03	    			XORLW	3
$025A	$E0EE	    			BZ	L_function_numbers_16
$025C	$5057	    			MOVF	FARG_function_numbers+0, 0, 0
$025E	$0A04	    			XORLW	4
$0260	$E0EE	    			BZ	L_function_numbers_17
$0262	$5057	    			MOVF	FARG_function_numbers+0, 0, 0
$0264	$0A05	    			XORLW	5
$0266	$E0EE	    			BZ	L_function_numbers_18
$0268	$	L_function_numbers_13:
;part5.c,77 :: 			return 0;
$0268	$6A00	    			CLRF	STACK_0, 0
;part5.c,78 :: 			}
$026A	$0012	    			RETURN
$026C	$	_LCD8_Out:
$026C	$D00F	    			BRA	L_LCD8_Out_12
$026E	$	L_LCD8_Out_14:
$026E	$0E80	    			MOVLW	128
$0270	$6E57	    			MOVWF	FARG_LCD8_Out+0, 0
$0272	$D019	    			BRA	L_LCD8_Out_13
$0274	$	L_LCD8_Out_15:
$0274	$0EC0	    			MOVLW	192
$0276	$6E57	    			MOVWF	FARG_LCD8_Out+0, 0
$0278	$D016	    			BRA	L_LCD8_Out_13
$027A	$	L_LCD8_Out_16:
$027A	$0E94	    			MOVLW	148
$027C	$6E57	    			MOVWF	FARG_LCD8_Out+0, 0
$027E	$D013	    			BRA	L_LCD8_Out_13
$0280	$	L_LCD8_Out_17:
$0280	$0ED4	    			MOVLW	212
$0282	$6E57	    			MOVWF	FARG_LCD8_Out+0, 0
$0284	$D010	    			BRA	L_LCD8_Out_13
$0286	$	L_LCD8_Out_18:
$0286	$0E80	    			MOVLW	128
$0288	$6E57	    			MOVWF	FARG_LCD8_Out+0, 0
$028A	$D00D	    			BRA	L_LCD8_Out_13
$028C	$	L_LCD8_Out_12:
$028C	$5057	    			MOVF	FARG_LCD8_Out+0, 0, 0
$028E	$0A01	    			XORLW	1
$0290	$E0EE	    			BZ	L_LCD8_Out_14
$0292	$5057	    			MOVF	FARG_LCD8_Out+0, 0, 0
$0294	$0A02	    			XORLW	2
$0296	$E0EE	    			BZ	L_LCD8_Out_15
$0298	$5057	    			MOVF	FARG_LCD8_Out+0, 0, 0
$029A	$0A03	    			XORLW	3
$029C	$E0EE	    			BZ	L_LCD8_Out_16
$029E	$5057	    			MOVF	FARG_LCD8_Out+0, 0, 0
$02A0	$0A04	    			XORLW	4
$02A2	$E0EE	    			BZ	L_LCD8_Out_17
$02A4	$D7F0	    			BRA	L_LCD8_Out_18
$02A6	$	L_LCD8_Out_13:
$02A6	$0458	    			DECF	FARG_LCD8_Out+1, 0, 0
$02A8	$6E00	    			MOVWF	STACK_0, 0
$02AA	$5057	    			MOVF	FARG_LCD8_Out+0, 0, 0
$02AC	$2600	    			ADDWF	STACK_0, 1, 0
$02AE	$C000	F057			MOVFF	STACK_0, FARG_LCD8_Out+0
$02B2	$0E01	    			MOVLW	1
$02B4	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$02B6	$C000	F05C			MOVFF	STACK_0, FARG_Lcd8_Cmd+0
$02BA	$EC75	F000			CALL	_Lcd8_Cmd
$02BE	$6A19	    			CLRF	Lcd8bit_main_global_cmd, 0
$02C0	$6A5B	    			CLRF	LCD8_Out_i_L0, 0
$02C2	$	L_LCD8_Out_19:
$02C2	$505B	    			MOVF	LCD8_Out_i_L0, 0, 0
$02C4	$2459	    			ADDWF	FARG_LCD8_Out+2, 0, 0
$02C6	$6EE9	    			MOVWF	FSR0L, 0
$02C8	$0E00	    			MOVLW	0
$02CA	$205A	    			ADDWFC	FARG_LCD8_Out+3, 0, 0
$02CC	$6EEA	    			MOVWF	FSR0L+1, 0
$02CE	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$02D2	$5200	    			MOVF	STACK_0, 1, 0
$02D4	$E00C	    			BZ	L_LCD8_Out_20
$02D6	$505B	    			MOVF	LCD8_Out_i_L0, 0, 0
$02D8	$2459	    			ADDWF	FARG_LCD8_Out+2, 0, 0
$02DA	$6EE9	    			MOVWF	FSR0L, 0
$02DC	$0E00	    			MOVLW	0
$02DE	$205A	    			ADDWFC	FARG_LCD8_Out+3, 0, 0
$02E0	$6EEA	    			MOVWF	FSR0L+1, 0
$02E2	$CFEE	F05C			MOVFF	POSTINC0, FARG_Lcd8_Cmd+0
$02E6	$EC75	F000			CALL	_Lcd8_Cmd
$02EA	$2A5B	    			INCF	LCD8_Out_i_L0, 1, 0
$02EC	$D7EA	    			BRA	L_LCD8_Out_19
$02EE	$	L_LCD8_Out_20:
$02EE	$0E01	    			MOVLW	1
$02F0	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$02F2	$0012	    			RETURN
$02F4	$	_Lcd8_Chr:
$02F4	$D00F	    			BRA	L_Lcd8_Chr_5
$02F6	$	L_Lcd8_Chr_7:
$02F6	$0E80	    			MOVLW	128
$02F8	$6E57	    			MOVWF	FARG_Lcd8_Chr+0, 0
$02FA	$D019	    			BRA	L_Lcd8_Chr_6
$02FC	$	L_Lcd8_Chr_8:
$02FC	$0EC0	    			MOVLW	192
$02FE	$6E57	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0300	$D016	    			BRA	L_Lcd8_Chr_6
$0302	$	L_Lcd8_Chr_9:
$0302	$0E94	    			MOVLW	148
$0304	$6E57	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0306	$D013	    			BRA	L_Lcd8_Chr_6
$0308	$	L_Lcd8_Chr_10:
$0308	$0ED4	    			MOVLW	212
$030A	$6E57	    			MOVWF	FARG_Lcd8_Chr+0, 0
$030C	$D010	    			BRA	L_Lcd8_Chr_6
$030E	$	L_Lcd8_Chr_11:
$030E	$0E80	    			MOVLW	128
$0310	$6E57	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0312	$D00D	    			BRA	L_Lcd8_Chr_6
$0314	$	L_Lcd8_Chr_5:
$0314	$5057	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$0316	$0A01	    			XORLW	1
$0318	$E0EE	    			BZ	L_Lcd8_Chr_7
$031A	$5057	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$031C	$0A02	    			XORLW	2
$031E	$E0EE	    			BZ	L_Lcd8_Chr_8
$0320	$5057	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$0322	$0A03	    			XORLW	3
$0324	$E0EE	    			BZ	L_Lcd8_Chr_9
$0326	$5057	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$0328	$0A04	    			XORLW	4
$032A	$E0EE	    			BZ	L_Lcd8_Chr_10
$032C	$D7F0	    			BRA	L_Lcd8_Chr_11
$032E	$	L_Lcd8_Chr_6:
$032E	$0458	    			DECF	FARG_Lcd8_Chr+1, 0, 0
$0330	$6E00	    			MOVWF	STACK_0, 0
$0332	$5057	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$0334	$2600	    			ADDWF	STACK_0, 1, 0
$0336	$C000	F057			MOVFF	STACK_0, FARG_Lcd8_Chr+0
$033A	$0E01	    			MOVLW	1
$033C	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$033E	$C000	F05C			MOVFF	STACK_0, FARG_Lcd8_Cmd+0
$0342	$EC75	F000			CALL	_Lcd8_Cmd
$0346	$6A19	    			CLRF	Lcd8bit_main_global_cmd, 0
$0348	$C059	F05C			MOVFF	FARG_Lcd8_Chr+2, FARG_Lcd8_Cmd+0
$034C	$EC75	F000			CALL	_Lcd8_Cmd
$0350	$0E01	    			MOVLW	1
$0352	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$0354	$0012	    			RETURN
$0356	$	_Lcd8_Init:
$0356	$EC60	F000			CALL	_Delay_5500us
$035A	$EC60	F000			CALL	_Delay_5500us
$035E	$EC60	F000			CALL	_Delay_5500us
$0362	$C059	F015			MOVFF	FARG_Lcd8_Init+2, Lcd8bit_main_global_dataAddress
$0366	$C05A	F016			MOVFF	FARG_Lcd8_Init+3, Lcd8bit_main_global_dataAddress+1
$036A	$C057	F017			MOVFF	FARG_Lcd8_Init+0, Lcd8bit_main_global_ctrlAddress
$036E	$C058	F018			MOVFF	FARG_Lcd8_Init+1, Lcd8bit_main_global_ctrlAddress+1
$0372	$C057	FFE9			MOVFF	FARG_Lcd8_Init+0, FSR0L
$0376	$C058	FFEA			MOVFF	FARG_Lcd8_Init+1, FSR0H
$037A	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$037C	$C059	FFE1			MOVFF	FARG_Lcd8_Init+2, FSR1L
$0380	$C05A	FFE2			MOVFF	FARG_Lcd8_Init+3, FSR1H
$0384	$6AE6	    			CLRF	POSTINC1, 0
$0386	$0E11	    			MOVLW	17
$0388	$24E1	    			ADDWF	FSR1L, 0, 0
$038A	$6E00	    			MOVWF	STACK_0, 0
$038C	$C000	FFE1			MOVFF	STACK_0, FSR1L
$0390	$6AE7	    			CLRF	INDF1, 0
$0392	$0E12	    			MOVLW	18
$0394	$5C00	    			SUBWF	STACK_0, 0, 0
$0396	$6EE1	    			MOVWF	FSR1L, 0
$0398	$0E12	    			MOVLW	18
$039A	$26E9	    			ADDWF	FSR0L, 1, 0
$039C	$92EF	    			BCF	INDF0, __LCD8_ENABLE, 0
$039E	$94EF	    			BCF	INDF0, __LCD8_RS, 0
$03A0	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$03A2	$0E12	    			MOVLW	18
$03A4	$5EE9	    			SUBWF	FSR0L, 1, 0
$03A6	$94EF	    			BCF	INDF0, __LCD8_RS, 0
$03A8	$92EF	    			BCF	INDF0, __LCD8_ENABLE, 0
$03AA	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$03AC	$0E30	    			MOVLW	48
$03AE	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$03B0	$EC75	F000			CALL	_Lcd8_Cmd
$03B4	$0E30	    			MOVLW	48
$03B6	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$03B8	$EC75	F000			CALL	_Lcd8_Cmd
$03BC	$0E30	    			MOVLW	48
$03BE	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$03C0	$EC75	F000			CALL	_Lcd8_Cmd
$03C4	$0E38	    			MOVLW	56
$03C6	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$03C8	$EC75	F000			CALL	_Lcd8_Cmd
$03CC	$0E08	    			MOVLW	8
$03CE	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$03D0	$EC75	F000			CALL	_Lcd8_Cmd
$03D4	$0E01	    			MOVLW	1
$03D6	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$03D8	$EC75	F000			CALL	_Lcd8_Cmd
$03DC	$0E06	    			MOVLW	6
$03DE	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$03E0	$EC75	F000			CALL	_Lcd8_Cmd
$03E4	$0E0C	    			MOVLW	12
$03E6	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$03E8	$EC75	F000			CALL	_Lcd8_Cmd
$03EC	$0E01	    			MOVLW	1
$03EE	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$03F0	$0012	    			RETURN
$03F2	$	_main:
$03F2	$0E53	    			MOVLW	83
$03F4	$6E27	    			MOVWF	lstr1_part5+0, 0
$03F6	$0E54	    			MOVLW	84
$03F8	$6E28	    			MOVWF	lstr1_part5+1, 0
$03FA	$0E45	    			MOVLW	69
$03FC	$6E29	    			MOVWF	lstr1_part5+2, 0
$03FE	$0E50	    			MOVLW	80
$0400	$6E2A	    			MOVWF	lstr1_part5+3, 0
$0402	$0E50	    			MOVLW	80
$0404	$6E2B	    			MOVWF	lstr1_part5+4, 0
$0406	$0E45	    			MOVLW	69
$0408	$6E2C	    			MOVWF	lstr1_part5+5, 0
$040A	$0E52	    			MOVLW	82
$040C	$6E2D	    			MOVWF	lstr1_part5+6, 0
$040E	$0E20	    			MOVLW	32
$0410	$6E2E	    			MOVWF	lstr1_part5+7, 0
$0412	$0E4D	    			MOVLW	77
$0414	$6E2F	    			MOVWF	lstr1_part5+8, 0
$0416	$0E4F	    			MOVLW	79
$0418	$6E30	    			MOVWF	lstr1_part5+9, 0
$041A	$0E54	    			MOVLW	84
$041C	$6E31	    			MOVWF	lstr1_part5+10, 0
$041E	$0E4F	    			MOVLW	79
$0420	$6E32	    			MOVWF	lstr1_part5+11, 0
$0422	$0E52	    			MOVLW	82
$0424	$6E33	    			MOVWF	lstr1_part5+12, 0
$0426	$0E20	    			MOVLW	32
$0428	$6E34	    			MOVWF	lstr1_part5+13, 0
$042A	$0E4F	    			MOVLW	79
$042C	$6E35	    			MOVWF	lstr1_part5+14, 0
$042E	$0E4E	    			MOVLW	78
$0430	$6E36	    			MOVWF	lstr1_part5+15, 0
$0432	$6A37	    			CLRF	lstr1_part5+16, 0
$0434	$0E41	    			MOVLW	65
$0436	$6E38	    			MOVWF	lstr2_part5+0, 0
$0438	$0E42	    			MOVLW	66
$043A	$6E39	    			MOVWF	lstr2_part5+1, 0
$043C	$0E43	    			MOVLW	67
$043E	$6E3A	    			MOVWF	lstr2_part5+2, 0
$0440	$0E44	    			MOVLW	68
$0442	$6E3B	    			MOVWF	lstr2_part5+3, 0
$0444	$0E45	    			MOVLW	69
$0446	$6E3C	    			MOVWF	lstr2_part5+4, 0
$0448	$0E46	    			MOVLW	70
$044A	$6E3D	    			MOVWF	lstr2_part5+5, 0
$044C	$0E47	    			MOVLW	71
$044E	$6E3E	    			MOVWF	lstr2_part5+6, 0
$0450	$0E48	    			MOVLW	72
$0452	$6E3F	    			MOVWF	lstr2_part5+7, 0
$0454	$0E49	    			MOVLW	73
$0456	$6E40	    			MOVWF	lstr2_part5+8, 0
$0458	$0E4A	    			MOVLW	74
$045A	$6E41	    			MOVWF	lstr2_part5+9, 0
$045C	$0E4B	    			MOVLW	75
$045E	$6E42	    			MOVWF	lstr2_part5+10, 0
$0460	$0E4C	    			MOVLW	76
$0462	$6E43	    			MOVWF	lstr2_part5+11, 0
$0464	$0E4D	    			MOVLW	77
$0466	$6E44	    			MOVWF	lstr2_part5+12, 0
$0468	$0E4E	    			MOVLW	78
$046A	$6E45	    			MOVWF	lstr2_part5+13, 0
$046C	$0E4F	    			MOVLW	79
$046E	$6E46	    			MOVWF	lstr2_part5+14, 0
$0470	$0E50	    			MOVLW	80
$0472	$6E47	    			MOVWF	lstr2_part5+15, 0
$0474	$0E51	    			MOVLW	81
$0476	$6E48	    			MOVWF	lstr2_part5+16, 0
$0478	$0E52	    			MOVLW	82
$047A	$6E49	    			MOVWF	lstr2_part5+17, 0
$047C	$0E53	    			MOVLW	83
$047E	$6E4A	    			MOVWF	lstr2_part5+18, 0
$0480	$0E54	    			MOVLW	84
$0482	$6E4B	    			MOVWF	lstr2_part5+19, 0
$0484	$0E55	    			MOVLW	85
$0486	$6E4C	    			MOVWF	lstr2_part5+20, 0
$0488	$0E56	    			MOVLW	86
$048A	$6E4D	    			MOVWF	lstr2_part5+21, 0
$048C	$0E57	    			MOVLW	87
$048E	$6E4E	    			MOVWF	lstr2_part5+22, 0
$0490	$0E58	    			MOVLW	88
$0492	$6E4F	    			MOVWF	lstr2_part5+23, 0
$0494	$0E59	    			MOVLW	89
$0496	$6E50	    			MOVWF	lstr2_part5+24, 0
$0498	$0E5A	    			MOVLW	90
$049A	$6E51	    			MOVWF	lstr2_part5+25, 0
$049C	$6A52	    			CLRF	lstr2_part5+26, 0
;part5.c,80 :: 			void main()
;part5.c,85 :: 			keypressed = read_keypad();  //Reading a key from the keypad
$049E	$ECA4	F000			CALL	_read_keypad
$04A2	$C000	F053			MOVFF	STACK_0, main_keypressed_L0
;part5.c,86 :: 			TRISD = 0x00;  //Define PORTD to operate as outpout
$04A6	$6A95	    			CLRF	TRISD, 0
;part5.c,87 :: 			TRISA = 0xFB;  // Define PORTA pin 2 as output.
$04A8	$0EFB	    			MOVLW	251
$04AA	$6E92	    			MOVWF	TRISA, 0
;part5.c,88 :: 			keypressed = keypressed - 0x30;
$04AC	$0E30	    			MOVLW	48
$04AE	$5E00	    			SUBWF	STACK_0, 1, 0
$04B0	$C000	F053			MOVFF	STACK_0, main_keypressed_L0
;part5.c,89 :: 			PORTD = function_numbers(keypressed); //Write the appropriate combination of bits to PORTD
$04B4	$C000	F057			MOVFF	STACK_0, FARG_function_numbers+0
$04B8	$EC15	F001			CALL	_function_numbers
$04BC	$C000	FF83			MOVFF	STACK_0, PORTD
;part5.c,90 :: 			switch (function_numbers(keypressed))
$04C0	$C053	F057			MOVFF	main_keypressed_L0, FARG_function_numbers+0
$04C4	$EC15	F001			CALL	_function_numbers
$04C8	$C000	F056			MOVFF	STACK_0, FLOC_main+47
$04CC	$D058	    			BRA	L_main_19
;part5.c,92 :: 			case 0x6D:
$04CE	$	L_main_21:
;part5.c,94 :: 			TRISC = 0x00;
$04CE	$6A94	    			CLRF	TRISC, 0
;part5.c,95 :: 			TRISB = 0xFF;
$04D0	$0EFF	    			MOVLW	255
$04D2	$6E93	    			MOVWF	TRISB, 0
;part5.c,96 :: 			PORTC.F1 =1;        // due to some difficulties with the programma the buzzer needs to be turned off on the begining of void main()
$04D4	$8282	    			BSF	PORTC, 1, 0
;part5.c,97 :: 			PORTC.F2 =0;
$04D6	$9482	    			BCF	PORTC, 2, 0
;part5.c,98 :: 			INTCON =  0b11010000;
$04D8	$0ED0	    			MOVLW	208
$04DA	$6EF2	    			MOVWF	INTCON, 0
;part5.c,99 :: 			INTCON3 = 0b00011000;
$04DC	$0E18	    			MOVLW	24
$04DE	$6EF0	    			MOVWF	INTCON3, 0
;part5.c,101 :: 			RCON =0x80;
$04E0	$0E80	    			MOVLW	128
$04E2	$6ED0	    			MOVWF	RCON, 0
;part5.c,102 :: 			Lcd8_Config(&PORTE, &PORTD, 2,1,0, 7,6,5,4,3,2,1,0);     //define PORT and PIN Connections
$04E4	$0E84	    			MOVLW	PORTE
$04E6	$6E57	    			MOVWF	FARG_Lcd8_Init+0, 0
$04E8	$0E0F	    			MOVLW	@PORTE
$04EA	$6E58	    			MOVWF	FARG_Lcd8_Init+1, 0
$04EC	$0E83	    			MOVLW	PORTD
$04EE	$6E59	    			MOVWF	FARG_Lcd8_Init+2, 0
$04F0	$0E0F	    			MOVLW	@PORTD
$04F2	$6E5A	    			MOVWF	FARG_Lcd8_Init+3, 0
$04F4	$ECAB	F001			CALL	_Lcd8_Init
;part5.c,103 :: 			Lcd8_Cmd(LCD_CURSOR_OFF); // Turn off blinking cursor
$04F8	$0E0C	    			MOVLW	12
$04FA	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04FC	$EC75	F000			CALL	_Lcd8_Cmd
;part5.c,104 :: 			Lcd8_Cmd(LCD_CLEAR);     // Clear screen
$0500	$0E01	    			MOVLW	1
$0502	$6E5C	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$0504	$EC75	F000			CALL	_Lcd8_Cmd
;part5.c,106 :: 			Lcd8_Out(1, 1, "STEPPER MOTOR ON"); // Printing text on LCD in first line
$0508	$0E01	    			MOVLW	1
$050A	$6E57	    			MOVWF	FARG_LCD8_Out+0, 0
$050C	$0E01	    			MOVLW	1
$050E	$6E58	    			MOVWF	FARG_LCD8_Out+1, 0
$0510	$0E27	    			MOVLW	lstr1_part5
$0512	$6E59	    			MOVWF	FARG_LCD8_Out+2, 0
$0514	$0E00	    			MOVLW	@lstr1_part5
$0516	$6E5A	    			MOVWF	FARG_LCD8_Out+3, 0
$0518	$EC36	F001			CALL	_LCD8_Out
;part5.c,107 :: 			while (1)
$051C	$	L_main_22:
;part5.c,110 :: 			text ="ABCDEFGHIJKLMNOPQRSTUVWXYZ";                 // printing A-Z with some delay so it is clearly working
$051C	$0E38	    			MOVLW	lstr2_part5
$051E	$6E54	    			MOVWF	main_text_L0, 0
$0520	$0E00	    			MOVLW	@lstr2_part5
$0522	$6E55	    			MOVWF	main_text_L0+1, 0
;part5.c,111 :: 			for (i=0;i<24;i++)
$0524	$6A1A	    			CLRF	_i, 0
$0526	$6A1B	    			CLRF	_i+1, 0
$0528	$	L_main_24:
$0528	$0E80	    			MOVLW	128
$052A	$181B	    			XORWF	_i+1, 0, 0
$052C	$6E00	    			MOVWF	STACK_0, 0
$052E	$0E80	    			MOVLW	128
$0530	$5C00	    			SUBWF	STACK_0, 0, 0
$0532	$E102	    			BNZ	L_main_27
$0534	$0E18	    			MOVLW	24
$0536	$5C1A	    			SUBWF	_i, 0, 0
$0538	$	L_main_27:
$0538	$E211	    			BC	L_main_25
;part5.c,112 :: 			Lcd8_Chr(2,8, text[i]);
$053A	$0E02	    			MOVLW	2
$053C	$6E57	    			MOVWF	FARG_Lcd8_Chr+0, 0
$053E	$0E08	    			MOVLW	8
$0540	$6E58	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0542	$501A	    			MOVF	_i, 0, 0
$0544	$2454	    			ADDWF	main_text_L0, 0, 0
$0546	$6EE9	    			MOVWF	FSR0L, 0
$0548	$501B	    			MOVF	_i+1, 0, 0
$054A	$2055	    			ADDWFC	main_text_L0+1, 0, 0
$054C	$6EEA	    			MOVWF	FSR0L+1, 0
$054E	$CFEE	F059			MOVFF	POSTINC0, FARG_Lcd8_Chr+2
$0552	$EC7A	F001			CALL	_Lcd8_Chr
$0556	$	L_main_26:
;part5.c,111 :: 			for (i=0;i<24;i++)
$0556	$4A1A	    			INFSNZ	_i, 1, 0
$0558	$2A1B	    			INCF	_i+1, 1, 0
;part5.c,112 :: 			Lcd8_Chr(2,8, text[i]);
$055A	$D7E6	    			BRA	L_main_24
$055C	$	L_main_25:
;part5.c,113 :: 			delay_ms(2);
$055C	$0E06	    			MOVLW	6
$055E	$6E0B	    			MOVWF	STACK_11, 0
$0560	$0EFF	    			MOVLW	255
$0562	$6E0A	    			MOVWF	STACK_10, 0
$0564	$2E0B	    			DECFSZ	STACK_11, F, 0
$0566	$D001	    			BRA	$+2
$0568	$D003	    			BRA	$+4
$056A	$2E0A	    			DECFSZ	STACK_10, F, 0
$056C	$D7FE	    			BRA	$-1
$056E	$D7FA	    			BRA	$-5
$0570	$0E2C	    			MOVLW	44
$0572	$6E0A	    			MOVWF	STACK_10, 0
$0574	$2E0A	    			DECFSZ	STACK_10, F, 0
$0576	$D7FE	    			BRA	$-1
$0578	$0000	    			NOP
$057A	$0000	    			NOP
;part5.c,114 :: 			}
$057C	$D7CF	    			BRA	L_main_22
;part5.c,115 :: 			}
$057E	$	L_main_19:
$057E	$5056	    			MOVF	FLOC_main+47, 0, 0
$0580	$0A6D	    			XORLW	109
$0582	$E0A5	    			BZ	L_main_21
$0584	$	L_main_20:
;part5.c,116 :: 			}
$0584	$D7FF	    			BRA	$
