;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 24-Jun-20 10:24:13 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EF1D	F004			GOTO	_main
$0008	$	_Delay_1us:
$0008	$0000	    			NOP
$000A	$0000	    			NOP
$000C	$0012	    			RETURN
$000E	$	_Delay_5500us:
$000E	$0E0F	    			MOVLW	15
$0010	$6E0B	    			MOVWF	STACK_11, 0
$0012	$0EFF	    			MOVLW	255
$0014	$6E0A	    			MOVWF	STACK_10, 0
$0016	$2E0B	    			DECFSZ	STACK_11, F, 0
$0018	$D001	    			BRA	$+2
$001A	$D003	    			BRA	$+4
$001C	$2E0A	    			DECFSZ	STACK_10, F, 0
$001E	$D7FE	    			BRA	$-1
$0020	$D7FA	    			BRA	$-5
$0022	$0E3E	    			MOVLW	62
$0024	$6E0A	    			MOVWF	STACK_10, 0
$0026	$2E0A	    			DECFSZ	STACK_10, F, 0
$0028	$D7FE	    			BRA	$-1
$002A	$0000	    			NOP
$002C	$0012	    			RETURN
$002E	$	_Delay_50us:
$002E	$0E21	    			MOVLW	33
$0030	$6E0A	    			MOVWF	STACK_10, 0
$0032	$2E0A	    			DECFSZ	STACK_10, F, 0
$0034	$D7FE	    			BRA	$-1
$0036	$0012	    			RETURN
$0038	$	_RES032:
$0038	$0100	    			MOVLB	0
$003A	$6A02	    			CLRF	STACK_2, 0
$003C	$6A01	    			CLRF	STACK_1, 0
$003E	$6A00	    			CLRF	STACK_0, 0
$0040	$6A08	    			CLRF	STACK_8, 0
$0042	$6A03	    			CLRF	STACK_3, 0
$0044	$0E00	    			MOVLW	0
$0046	$0012	    			RETURN
$0048	$	_SETFUN32:
$0048	$0100	    			MOVLB	0
$004A	$840B	    			BSF	STACK_11, 2, 0
$004C	$AE0B	    			BTFSS	STACK_11, 7, 0
$004E	$EF30	F000			GOTO	SETFUN32EEE
$0052	$0E01	    			MOVLW	0x01
$0054	$6E03	    			MOVWF	STACK_3, 0
$0056	$6A02	    			CLRF	STACK_2, 0
$0058	$6A01	    			CLRF	STACK_1, 0
$005A	$6A00	    			CLRF	STACK_0, 0
$005C	$360A	    			RLCF	STACK_10, F, 0
$005E	$3202	    			RRCF	STACK_2, F, 0
$0060	$	SETFUN32EEE:
$0060	$0EFF	    			MOVLW	0xFF
$0062	$0012	    			RETURN
$0064	$	_FIXSIGN32:
$0064	$0100	    			MOVLB	0
$0066	$AE0A	    			BTFSS	STACK_10, 7, 0
$0068	$9E02	    			BCF	STACK_2, 7, 0
$006A	$0E00	    			MOVLW	0
$006C	$0012	    			RETURN
$006E	$	_Lcd8_Cmd:
$006E	$C015	FFE9			MOVFF	Lcd8bit_main_global_dataAddress, FSR0L
$0072	$C016	FFEA			MOVFF	Lcd8bit_main_global_dataAddress+1, FSR0H
$0076	$C017	FFE1			MOVFF	Lcd8bit_main_global_ctrlAddress, FSR1L
$007A	$C018	FFE2			MOVFF	Lcd8bit_main_global_ctrlAddress+1, FSR1H
$007E	$6AEF	    			CLRF	INDF0, 0
$0080	$523F	    			MOVF	FARG_Lcd8_Cmd+0, 1, 0
$0082	$E000	    			BZ	L_Lcd8_Cmd_0
$0084	$	L_Lcd8_Cmd_0:
$0084	$BE3F	    			BTFSC	FARG_Lcd8_Cmd+0, 7, 0
$0086	$8EEF	    			BSF	INDF0, __LCD8_DB7, 0
$0088	$BC3F	    			BTFSC	FARG_Lcd8_Cmd+0, 6, 0
$008A	$8CEF	    			BSF	INDF0, __LCD8_DB6, 0
$008C	$BA3F	    			BTFSC	FARG_Lcd8_Cmd+0, 5, 0
$008E	$8AEF	    			BSF	INDF0, __LCD8_DB5, 0
$0090	$B83F	    			BTFSC	FARG_Lcd8_Cmd+0, 4, 0
$0092	$88EF	    			BSF	INDF0, __LCD8_DB4, 0
$0094	$B63F	    			BTFSC	FARG_Lcd8_Cmd+0, 3, 0
$0096	$86EF	    			BSF	INDF0, __LCD8_DB3, 0
$0098	$B43F	    			BTFSC	FARG_Lcd8_Cmd+0, 2, 0
$009A	$84EF	    			BSF	INDF0, __LCD8_DB2, 0
$009C	$B23F	    			BTFSC	FARG_Lcd8_Cmd+0, 1, 0
$009E	$82EF	    			BSF	INDF0, __LCD8_DB1, 0
$00A0	$B03F	    			BTFSC	FARG_Lcd8_Cmd+0, 0, 0
$00A2	$80EF	    			BSF	INDF0, __LCD8_DB0, 0
$00A4	$5019	    			MOVF	Lcd8bit_main_global_cmd, 0, 0
$00A6	$0A01	    			XORLW	1
$00A8	$E103	    			BNZ	L_Lcd8_Cmd_1
$00AA	$94E7	    			BCF	INDF1, __LCD8_RS, 0
$00AC	$EF59	F000			GOTO	L_Lcd8_Cmd_2
$00B0	$	L_Lcd8_Cmd_1:
$00B0	$84E7	    			BSF	INDF1, __LCD8_RS, 0
$00B2	$	L_Lcd8_Cmd_2:
$00B2	$82E7	    			BSF	INDF1, __LCD8_ENABLE, 0
$00B4	$EC04	F000			CALL	_Delay_1us
$00B8	$92E7	    			BCF	INDF1, __LCD8_ENABLE, 0
$00BA	$5019	    			MOVF	Lcd8bit_main_global_cmd, 0, 0
$00BC	$0A01	    			XORLW	1
$00BE	$E103	    			BNZ	L_Lcd8_Cmd_3
$00C0	$EC07	F000			CALL	_Delay_5500us
$00C4	$D002	    			BRA	L_Lcd8_Cmd_4
$00C6	$	L_Lcd8_Cmd_3:
$00C6	$EC17	F000			CALL	_Delay_50us
$00CA	$	L_Lcd8_Cmd_4:
$00CA	$0012	    			RETURN
$00CC	$	_Delay_22us:
$00CC	$0E0E	    			MOVLW	14
$00CE	$6E0A	    			MOVWF	STACK_10, 0
$00D0	$2E0A	    			DECFSZ	STACK_10, F, 0
$00D2	$D7FE	    			BRA	$-1
$00D4	$0000	    			NOP
$00D6	$0012	    			RETURN
$00D8	$	_Div_16x16_U:
$00D8	$0100	    			MOVLB	0
$00DA	$6A08	    			CLRF	STACK_8, 0
$00DC	$6A09	    			CLRF	STACK_9, 0
$00DE	$0E10	    			MOVLW	16
$00E0	$6E0C	    			MOVWF	STACK_12, 0
$00E2	$3401	    			RLCF	STACK_1, W, 0
$00E4	$3608	    			RLCF	STACK_8, F, 0
$00E6	$3609	    			RLCF	STACK_9, F, 0
$00E8	$5004	    			MOVF	STACK_4, W, 0
$00EA	$5E08	    			SUBWF	STACK_8, F, 0
$00EC	$5005	    			MOVF	STACK_5, W, 0
$00EE	$A0D8	    			BTFSS	STATUS, C, 0
$00F0	$3C05	    			INCFSZ	STACK_5, W, 0
$00F2	$5E09	    			SUBWF	STACK_9, F, 0
$00F4	$B0D8	    			BTFSC	STATUS, C, 0
$00F6	$EF84	F000			GOTO	$+8
$00FA	$5004	    			MOVF	STACK_4, W, 0
$00FC	$2608	    			ADDWF	STACK_8, F, 0
$00FE	$5005	    			MOVF	STACK_5, W, 0
$0100	$B0D8	    			BTFSC	STATUS, C, 0
$0102	$3C05	    			INCFSZ	STACK_5, W, 0
$0104	$2609	    			ADDWF	STACK_9, F, 0
$0106	$90D8	    			BCF	STATUS, C, 0
$0108	$3600	    			RLCF	STACK_0, F, 0
$010A	$3601	    			RLCF	STACK_1, F, 0
$010C	$2E0C	    			DECFSZ	STACK_12, F, 0
$010E	$EF71	F000			GOTO	$-21
$0112	$0012	    			RETURN
$0114	$	_Mul_16x16_S:
$0114	$0100	    			MOVLB	0
$0116	$5000	    			MOVF	STACK_0, W, 0
$0118	$0204	    			MULWF	STACK_4, 0
$011A	$CFF4	F009			MOVFF	PRODH, STACK_9
$011E	$CFF3	F008			MOVFF	PRODL, STACK_8
$0122	$5001	    			MOVF	STACK_1, W, 0
$0124	$0205	    			MULWF	STACK_5, 0
$0126	$CFF4	F00B			MOVFF	PRODH, STACK_11
$012A	$CFF3	F00A			MOVFF	PRODL, STACK_10
$012E	$5000	    			MOVF	STACK_0, W, 0
$0130	$0205	    			MULWF	STACK_5, 0
$0132	$50F3	    			MOVF	PRODL, W, 0
$0134	$2609	    			ADDWF	STACK_9, F, 0
$0136	$50F4	    			MOVF	PRODH, W, 0
$0138	$220A	    			ADDWFC	STACK_10, F, 0
$013A	$6AE8	    			CLRF	WREG, 0
$013C	$220B	    			ADDWFC	STACK_11, F, 0
$013E	$5001	    			MOVF	STACK_1, W, 0
$0140	$0204	    			MULWF	STACK_4, 0
$0142	$50F3	    			MOVF	PRODL, W, 0
$0144	$2609	    			ADDWF	STACK_9, F, 0
$0146	$50F4	    			MOVF	PRODH, W, 0
$0148	$220A	    			ADDWFC	STACK_10, F, 0
$014A	$6AE8	    			CLRF	WREG, 0
$014C	$220B	    			ADDWFC	STACK_11, F, 0
$014E	$AE05	    			BTFSS	STACK_5, 7, 0
$0150	$EFAE	F000			GOTO	$+5
$0154	$5000	    			MOVF	STACK_0, W, 0
$0156	$5C0A	    			SUBWF	STACK_10, W, 0
$0158	$5001	    			MOVF	STACK_1, W, 0
$015A	$580B	    			SUBWFB	STACK_11, W, 0
$015C	$AE01	    			BTFSS	STACK_1, 7, 0
$015E	$EFB5	F000			GOTO	$+5
$0162	$5004	    			MOVF	STACK_4, W, 0
$0164	$5C0A	    			SUBWF	STACK_10, W, 0
$0166	$5005	    			MOVF	STACK_5, W, 0
$0168	$580B	    			SUBWFB	STACK_11, W, 0
$016A	$C008	F000			MOVFF	STACK_8, STACK_0
$016E	$C009	F001			MOVFF	STACK_9, STACK_1
$0172	$C00A	F002			MOVFF	STACK_10, STACK_2
$0176	$C00B	F003			MOVFF	STACK_11, STACK_3
$017A	$0012	    			RETURN
$017C	$	_NRM3232:
$017C	$0100	    			MOVLB	0
$017E	$6A0C	    			CLRF	STACK_12, 0
$0180	$6A0E	    			CLRF	STACK_14, 0
$0182	$5002	    			MOVF	STACK_2, W, 0
$0184	$A4D8	    			BTFSS	STATUS, Z, 0
$0186	$EFD8	F000			GOTO	NORM3232
$018A	$C001	F002			MOVFF	STACK_1, STACK_2
$018E	$C000	F001			MOVFF	STACK_0, STACK_1
$0192	$6A00	    			CLRF	STACK_0, 0
$0194	$860E	    			BSF	STACK_14, 3, 0
$0196	$5002	    			MOVF	STACK_2, W, 0
$0198	$A4D8	    			BTFSS	STATUS, Z, 0
$019A	$EFD8	F000			GOTO	NORM3232
$019E	$C001	F002			MOVFF	STACK_1, STACK_2
$01A2	$6A01	    			CLRF	STACK_1, 0
$01A4	$960E	    			BCF	STACK_14, 3, 0
$01A6	$880E	    			BSF	STACK_14, 4, 0
$01A8	$5002	    			MOVF	STACK_2, W, 0
$01AA	$B4D8	    			BTFSC	STATUS, Z, 0
$01AC	$EFEA	F000			GOTO	JPNRES032
$01B0	$	NORM3232:
$01B0	$500E	    			MOVF	STACK_14, W, 0
$01B2	$5E03	    			SUBWF	STACK_3, F, 0
$01B4	$A4D8	    			BTFSS	STATUS, Z, 0
$01B6	$A0D8	    			BTFSS	STATUS, C, 0
$01B8	$EFF0	F000			GOTO	JPNSETFUN32
$01BC	$90D8	    			BCF	STATUS, C, 0
$01BE	$	NORM3232A:
$01BE	$BE02	    			BTFSC	STACK_2, 7, 0
$01C0	$EFF6	F000			GOTO	JMPNFIXSIGN32
$01C4	$3600	    			RLCF	STACK_0, F, 0
$01C6	$3601	    			RLCF	STACK_1, F, 0
$01C8	$3602	    			RLCF	STACK_2, F, 0
$01CA	$2E03	    			DECFSZ	STACK_3, F, 0
$01CC	$EFDF	F000			GOTO	NORM3232A
$01D0	$EFF0	F000			GOTO	JPNSETFUN32
$01D4	$	JPNRES032:
$01D4	$0E01	    			MOVLW	0x01
$01D6	$6E0C	    			MOVWF	STACK_12, 0
$01D8	$EC1C	F000			CALL	_RES032
$01DC	$EFFA	F000			GOTO	NORM32EEE
$01E0	$	JPNSETFUN32:
$01E0	$0E02	    			MOVLW	0x02
$01E2	$6E0C	    			MOVWF	STACK_12, 0
$01E4	$EC24	F000			CALL	_SETFUN32
$01E8	$EFFA	F000			GOTO	NORM32EEE
$01EC	$	JMPNFIXSIGN32:
$01EC	$0E04	    			MOVLW	0x04
$01EE	$6E0C	    			MOVWF	STACK_12, 0
$01F0	$EC32	F000			CALL	_FIXSIGN32
$01F4	$	NORM32EEE:
$01F4	$0012	    			RETURN
$01F6	$	_SETFOV32:
$01F6	$0100	    			MOVLB	0
$01F8	$820B	    			BSF	STACK_11, 1, 0
$01FA	$AE0B	    			BTFSS	STACK_11, 7, 0
$01FC	$EF06	F001			GOTO	SETFOV32EEE
$0200	$6803	    			SETF	STACK_3, 0
$0202	$6802	    			SETF	STACK_2, 0
$0204	$6801	    			SETF	STACK_1, 0
$0206	$6800	    			SETF	STACK_0, 0
$0208	$360A	    			RLCF	STACK_10, F, 0
$020A	$3202	    			RRCF	STACK_2, F, 0
$020C	$	SETFOV32EEE:
$020C	$0EFF	    			MOVLW	0xFF
$020E	$0012	    			RETURN
$0210	$	_SETIOV3224:
$0210	$0100	    			MOVLB	0
$0212	$800B	    			BSF	STACK_11, 0, 0
$0214	$AE0B	    			BTFSS	STACK_11, 7, 0
$0216	$EF15	F001			GOTO	SETIOV3224EEE
$021A	$6A02	    			CLRF	STACK_2, 0
$021C	$AE0A	    			BTFSS	STACK_10, 7, 0
$021E	$0EFF	    			MOVLW	0xFF
$0220	$6E02	    			MOVWF	STACK_2, 0
$0222	$6E01	    			MOVWF	STACK_1, 0
$0224	$6E00	    			MOVWF	STACK_0, 0
$0226	$360A	    			RLCF	STACK_10, F, 0
$0228	$3202	    			RRCF	STACK_2, F, 0
$022A	$	SETIOV3224EEE:
$022A	$0EFF	    			MOVLW	0xFF
$022C	$0012	    			RETURN
$022E	$	_read_keypad:
;part3.c,4 :: 			char  read_keypad()
;part3.c,7 :: 			PORTD = 0xFF;
$022E	$0EFF	    			MOVLW	255
$0230	$6E83	    			MOVWF	PORTD, 0
;part3.c,8 :: 			TRISD = 0xFF;    //configure PORT D as inpout
$0232	$0EFF	    			MOVLW	255
$0234	$6E95	    			MOVWF	TRISD, 0
;part3.c,9 :: 			TRISB = 0x00;     //configure PORT B as outpout
$0236	$6A93	    			CLRF	TRISB, 0
;part3.c,10 :: 			PORTB = 0xFF;     //set all pins of PORT B to 1;
$0238	$0EFF	    			MOVLW	255
$023A	$6E81	    			MOVWF	PORTB, 0
;part3.c,12 :: 			key =0;
$023C	$6A3B	    			CLRF	read_keypad_key_L0, 0
;part3.c,13 :: 			do {                       //1-5 buttons
$023E	$	L_read_keypad_0:
;part3.c,15 :: 			PORTB.F0 = 0;
$023E	$9081	    			BCF	PORTB, 0, 0
;part3.c,16 :: 			delay_ms(10);
$0240	$0E1A	    			MOVLW	26
$0242	$6E0B	    			MOVWF	STACK_11, 0
$0244	$0EFF	    			MOVLW	255
$0246	$6E0A	    			MOVWF	STACK_10, 0
$0248	$2E0B	    			DECFSZ	STACK_11, F, 0
$024A	$D001	    			BRA	$+2
$024C	$D003	    			BRA	$+4
$024E	$2E0A	    			DECFSZ	STACK_10, F, 0
$0250	$D7FE	    			BRA	$-1
$0252	$D7FA	    			BRA	$-5
$0254	$0EE7	    			MOVLW	231
$0256	$6E0A	    			MOVWF	STACK_10, 0
$0258	$2E0A	    			DECFSZ	STACK_10, F, 0
$025A	$D7FE	    			BRA	$-1
$025C	$0000	    			NOP
;part3.c,17 :: 			var = PORTD;
$025E	$CF83	F03A			MOVFF	PORTD, read_keypad_var_L0
;part3.c,19 :: 			if (var.F2 == 0) key = '4';
$0262	$6A01	    			CLRF	STACK_1, 0
$0264	$B43A	    			BTFSC	read_keypad_var_L0, 2, 0
$0266	$2A01	    			INCF	STACK_1, 1, 0
$0268	$5001	    			MOVF	STACK_1, 0, 0
$026A	$0A00	    			XORLW	0
$026C	$E103	    			BNZ	L_read_keypad_2
$026E	$0E34	    			MOVLW	52
$0270	$6E3B	    			MOVWF	read_keypad_key_L0, 0
$0272	$D008	    			BRA	L_read_keypad_3
$0274	$	L_read_keypad_2:
;part3.c,20 :: 			else if (var.F3 == 0) key = '1';
$0274	$6A01	    			CLRF	STACK_1, 0
$0276	$B63A	    			BTFSC	read_keypad_var_L0, 3, 0
$0278	$2A01	    			INCF	STACK_1, 1, 0
$027A	$5001	    			MOVF	STACK_1, 0, 0
$027C	$0A00	    			XORLW	0
$027E	$E102	    			BNZ	L_read_keypad_4
$0280	$0E31	    			MOVLW	49
$0282	$6E3B	    			MOVWF	read_keypad_key_L0, 0
$0284	$	L_read_keypad_4:
$0284	$	L_read_keypad_3:
;part3.c,21 :: 			PORTB.F0 =1;
$0284	$8081	    			BSF	PORTB, 0, 0
;part3.c,24 :: 			PORTB.F1 = 0;
$0286	$9281	    			BCF	PORTB, 1, 0
;part3.c,25 :: 			delay_ms(10);
$0288	$0E1A	    			MOVLW	26
$028A	$6E0B	    			MOVWF	STACK_11, 0
$028C	$0EFF	    			MOVLW	255
$028E	$6E0A	    			MOVWF	STACK_10, 0
$0290	$2E0B	    			DECFSZ	STACK_11, F, 0
$0292	$D001	    			BRA	$+2
$0294	$D003	    			BRA	$+4
$0296	$2E0A	    			DECFSZ	STACK_10, F, 0
$0298	$D7FE	    			BRA	$-1
$029A	$D7FA	    			BRA	$-5
$029C	$0EE7	    			MOVLW	231
$029E	$6E0A	    			MOVWF	STACK_10, 0
$02A0	$2E0A	    			DECFSZ	STACK_10, F, 0
$02A2	$D7FE	    			BRA	$-1
$02A4	$0000	    			NOP
;part3.c,26 :: 			var = PORTD;
$02A6	$CF83	F03A			MOVFF	PORTD, read_keypad_var_L0
;part3.c,28 :: 			if (var.F2 == 0)key = '5';
$02AA	$6A01	    			CLRF	STACK_1, 0
$02AC	$B43A	    			BTFSC	read_keypad_var_L0, 2, 0
$02AE	$2A01	    			INCF	STACK_1, 1, 0
$02B0	$5001	    			MOVF	STACK_1, 0, 0
$02B2	$0A00	    			XORLW	0
$02B4	$E103	    			BNZ	L_read_keypad_5
$02B6	$0E35	    			MOVLW	53
$02B8	$6E3B	    			MOVWF	read_keypad_key_L0, 0
$02BA	$D008	    			BRA	L_read_keypad_6
$02BC	$	L_read_keypad_5:
;part3.c,29 :: 			else if (var.F3 == 0)key = '2';
$02BC	$6A01	    			CLRF	STACK_1, 0
$02BE	$B63A	    			BTFSC	read_keypad_var_L0, 3, 0
$02C0	$2A01	    			INCF	STACK_1, 1, 0
$02C2	$5001	    			MOVF	STACK_1, 0, 0
$02C4	$0A00	    			XORLW	0
$02C6	$E102	    			BNZ	L_read_keypad_7
$02C8	$0E32	    			MOVLW	50
$02CA	$6E3B	    			MOVWF	read_keypad_key_L0, 0
$02CC	$	L_read_keypad_7:
$02CC	$	L_read_keypad_6:
;part3.c,30 :: 			PORTB.F1 =1;
$02CC	$8281	    			BSF	PORTB, 1, 0
;part3.c,33 :: 			PORTB.F2 =0;
$02CE	$9481	    			BCF	PORTB, 2, 0
;part3.c,34 :: 			delay_ms(10);
$02D0	$0E1A	    			MOVLW	26
$02D2	$6E0B	    			MOVWF	STACK_11, 0
$02D4	$0EFF	    			MOVLW	255
$02D6	$6E0A	    			MOVWF	STACK_10, 0
$02D8	$2E0B	    			DECFSZ	STACK_11, F, 0
$02DA	$D001	    			BRA	$+2
$02DC	$D003	    			BRA	$+4
$02DE	$2E0A	    			DECFSZ	STACK_10, F, 0
$02E0	$D7FE	    			BRA	$-1
$02E2	$D7FA	    			BRA	$-5
$02E4	$0EE7	    			MOVLW	231
$02E6	$6E0A	    			MOVWF	STACK_10, 0
$02E8	$2E0A	    			DECFSZ	STACK_10, F, 0
$02EA	$D7FE	    			BRA	$-1
$02EC	$0000	    			NOP
;part3.c,35 :: 			var = PORTD;
$02EE	$CF83	F03A			MOVFF	PORTD, read_keypad_var_L0
;part3.c,37 :: 			if (var.F3 == 0) key = '3';
$02F2	$6A01	    			CLRF	STACK_1, 0
$02F4	$B63A	    			BTFSC	read_keypad_var_L0, 3, 0
$02F6	$2A01	    			INCF	STACK_1, 1, 0
$02F8	$5001	    			MOVF	STACK_1, 0, 0
$02FA	$0A00	    			XORLW	0
$02FC	$E102	    			BNZ	L_read_keypad_8
$02FE	$0E33	    			MOVLW	51
$0300	$6E3B	    			MOVWF	read_keypad_key_L0, 0
$0302	$	L_read_keypad_8:
;part3.c,38 :: 			PORTB.F2 =1;
$0302	$8481	    			BSF	PORTB, 2, 0
;part3.c,40 :: 			}while (key == 0);
$0304	$503B	    			MOVF	read_keypad_key_L0, 0, 0
$0306	$0A00	    			XORLW	0
$0308	$E09A	    			BZ	L_read_keypad_0
$030A	$	L_read_keypad_1:
;part3.c,42 :: 			return key;
$030A	$C03B	F000			MOVFF	read_keypad_key_L0, STACK_0
;part3.c,43 :: 			}
$030E	$0012	    			RETURN
$0310	$	_function_numbers:
;part3.c,45 :: 			unsigned char function_numbers(unsigned char v)
;part3.c,47 :: 			switch(v)
$0310	$D00F	    			BRA	L_function_numbers_9
;part3.c,49 :: 			case 1:
$0312	$	L_function_numbers_11:
;part3.c,50 :: 			return 0x06;
$0312	$0E06	    			MOVLW	6
$0314	$6E00	    			MOVWF	STACK_0, 0
$0316	$0012	    			RETURN
;part3.c,51 :: 			case 2:
$0318	$	L_function_numbers_12:
;part3.c,52 :: 			return 0x5B;
$0318	$0E5B	    			MOVLW	91
$031A	$6E00	    			MOVWF	STACK_0, 0
$031C	$0012	    			RETURN
;part3.c,53 :: 			case 3:
$031E	$	L_function_numbers_13:
;part3.c,54 :: 			return 0x4F;
$031E	$0E4F	    			MOVLW	79
$0320	$6E00	    			MOVWF	STACK_0, 0
$0322	$0012	    			RETURN
;part3.c,55 :: 			case 4:
$0324	$	L_function_numbers_14:
;part3.c,56 :: 			return 0x66;
$0324	$0E66	    			MOVLW	102
$0326	$6E00	    			MOVWF	STACK_0, 0
$0328	$0012	    			RETURN
;part3.c,57 :: 			case 5:
$032A	$	L_function_numbers_15:
;part3.c,58 :: 			return 0x6D;
$032A	$0E6D	    			MOVLW	109
$032C	$6E00	    			MOVWF	STACK_0, 0
$032E	$0012	    			RETURN
;part3.c,59 :: 			}
$0330	$	L_function_numbers_9:
$0330	$503A	    			MOVF	FARG_function_numbers+0, 0, 0
$0332	$0A01	    			XORLW	1
$0334	$E0EE	    			BZ	L_function_numbers_11
$0336	$503A	    			MOVF	FARG_function_numbers+0, 0, 0
$0338	$0A02	    			XORLW	2
$033A	$E0EE	    			BZ	L_function_numbers_12
$033C	$503A	    			MOVF	FARG_function_numbers+0, 0, 0
$033E	$0A03	    			XORLW	3
$0340	$E0EE	    			BZ	L_function_numbers_13
$0342	$503A	    			MOVF	FARG_function_numbers+0, 0, 0
$0344	$0A04	    			XORLW	4
$0346	$E0EE	    			BZ	L_function_numbers_14
$0348	$503A	    			MOVF	FARG_function_numbers+0, 0, 0
$034A	$0A05	    			XORLW	5
$034C	$E0EE	    			BZ	L_function_numbers_15
$034E	$	L_function_numbers_10:
;part3.c,60 :: 			return 0;
$034E	$6A00	    			CLRF	STACK_0, 0
;part3.c,61 :: 			}
$0350	$0012	    			RETURN
$0352	$	_LCD8_Out:
$0352	$D00F	    			BRA	L_LCD8_Out_12
$0354	$	L_LCD8_Out_14:
$0354	$0E80	    			MOVLW	128
$0356	$6E3A	    			MOVWF	FARG_LCD8_Out+0, 0
$0358	$D019	    			BRA	L_LCD8_Out_13
$035A	$	L_LCD8_Out_15:
$035A	$0EC0	    			MOVLW	192
$035C	$6E3A	    			MOVWF	FARG_LCD8_Out+0, 0
$035E	$D016	    			BRA	L_LCD8_Out_13
$0360	$	L_LCD8_Out_16:
$0360	$0E94	    			MOVLW	148
$0362	$6E3A	    			MOVWF	FARG_LCD8_Out+0, 0
$0364	$D013	    			BRA	L_LCD8_Out_13
$0366	$	L_LCD8_Out_17:
$0366	$0ED4	    			MOVLW	212
$0368	$6E3A	    			MOVWF	FARG_LCD8_Out+0, 0
$036A	$D010	    			BRA	L_LCD8_Out_13
$036C	$	L_LCD8_Out_18:
$036C	$0E80	    			MOVLW	128
$036E	$6E3A	    			MOVWF	FARG_LCD8_Out+0, 0
$0370	$D00D	    			BRA	L_LCD8_Out_13
$0372	$	L_LCD8_Out_12:
$0372	$503A	    			MOVF	FARG_LCD8_Out+0, 0, 0
$0374	$0A01	    			XORLW	1
$0376	$E0EE	    			BZ	L_LCD8_Out_14
$0378	$503A	    			MOVF	FARG_LCD8_Out+0, 0, 0
$037A	$0A02	    			XORLW	2
$037C	$E0EE	    			BZ	L_LCD8_Out_15
$037E	$503A	    			MOVF	FARG_LCD8_Out+0, 0, 0
$0380	$0A03	    			XORLW	3
$0382	$E0EE	    			BZ	L_LCD8_Out_16
$0384	$503A	    			MOVF	FARG_LCD8_Out+0, 0, 0
$0386	$0A04	    			XORLW	4
$0388	$E0EE	    			BZ	L_LCD8_Out_17
$038A	$D7F0	    			BRA	L_LCD8_Out_18
$038C	$	L_LCD8_Out_13:
$038C	$043B	    			DECF	FARG_LCD8_Out+1, 0, 0
$038E	$6E00	    			MOVWF	STACK_0, 0
$0390	$503A	    			MOVF	FARG_LCD8_Out+0, 0, 0
$0392	$2600	    			ADDWF	STACK_0, 1, 0
$0394	$C000	F03A			MOVFF	STACK_0, FARG_LCD8_Out+0
$0398	$0E01	    			MOVLW	1
$039A	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$039C	$C000	F03F			MOVFF	STACK_0, FARG_Lcd8_Cmd+0
$03A0	$EC37	F000			CALL	_Lcd8_Cmd
$03A4	$6A19	    			CLRF	Lcd8bit_main_global_cmd, 0
$03A6	$6A3E	    			CLRF	LCD8_Out_i_L0, 0
$03A8	$	L_LCD8_Out_19:
$03A8	$503E	    			MOVF	LCD8_Out_i_L0, 0, 0
$03AA	$243C	    			ADDWF	FARG_LCD8_Out+2, 0, 0
$03AC	$6EE9	    			MOVWF	FSR0L, 0
$03AE	$0E00	    			MOVLW	0
$03B0	$203D	    			ADDWFC	FARG_LCD8_Out+3, 0, 0
$03B2	$6EEA	    			MOVWF	FSR0L+1, 0
$03B4	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$03B8	$5200	    			MOVF	STACK_0, 1, 0
$03BA	$E00C	    			BZ	L_LCD8_Out_20
$03BC	$503E	    			MOVF	LCD8_Out_i_L0, 0, 0
$03BE	$243C	    			ADDWF	FARG_LCD8_Out+2, 0, 0
$03C0	$6EE9	    			MOVWF	FSR0L, 0
$03C2	$0E00	    			MOVLW	0
$03C4	$203D	    			ADDWFC	FARG_LCD8_Out+3, 0, 0
$03C6	$6EEA	    			MOVWF	FSR0L+1, 0
$03C8	$CFEE	F03F			MOVFF	POSTINC0, FARG_Lcd8_Cmd+0
$03CC	$EC37	F000			CALL	_Lcd8_Cmd
$03D0	$2A3E	    			INCF	LCD8_Out_i_L0, 1, 0
$03D2	$D7EA	    			BRA	L_LCD8_Out_19
$03D4	$	L_LCD8_Out_20:
$03D4	$0E01	    			MOVLW	1
$03D6	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$03D8	$0012	    			RETURN
$03DA	$	_PWM_Start:
$03DA	$9494	    			BCF	TRISC, 2, 0
$03DC	$84CA	    			BSF	T2CON, 2, 0
$03DE	$0E0C	    			MOVLW	12
$03E0	$12BD	    			IORWF	CCP1CON, 1, 0
$03E2	$0012	    			RETURN
$03E4	$	_Adc_Read:
$03E4	$6AC2	    			CLRF	ADCON0, 0
$03E6	$0EC0	    			MOVLW	192
$03E8	$12C2	    			IORWF	ADCON0, 1, 0
$03EA	$8CC1	    			BSF	ADCON1, 6, 0
$03EC	$8EC1	    			BSF	ADCON1, 7, 0
$03EE	$C03A	F000			MOVFF	FARG_Adc_Read+0, STACK_0
$03F2	$3600	    			RLCF	STACK_0, 1, 0
$03F4	$9000	    			BCF	STACK_0, 0, 0
$03F6	$3600	    			RLCF	STACK_0, 1, 0
$03F8	$9000	    			BCF	STACK_0, 0, 0
$03FA	$3600	    			RLCF	STACK_0, 1, 0
$03FC	$9000	    			BCF	STACK_0, 0, 0
$03FE	$5000	    			MOVF	STACK_0, 0, 0
$0400	$12C2	    			IORWF	ADCON0, 1, 0
$0402	$80C2	    			BSF	ADCON0, 0, 0
$0404	$EC66	F000			CALL	_Delay_22us
$0408	$84C2	    			BSF	ADCON0, 2, 0
$040A	$	L_Adc_Read_0:
$040A	$B4C2	    			BTFSC	ADCON0, 2, 0
$040C	$D7FE	    			BRA	L_Adc_Read_0
$040E	$	L_Adc_Read_1:
$040E	$0E08	    			MOVLW	8
$0410	$6E02	    			MOVWF	STACK_2, 0
$0412	$CFC4	F000			MOVFF	ADRESH, STACK_0
$0416	$0E00	    			MOVLW	0
$0418	$6E01	    			MOVWF	STACK_0+1, 0
$041A	$5002	    			MOVF	STACK_2, 0, 0
$041C	$	L_Adc_Read_2:
$041C	$E005	    			BZ	L_Adc_Read_3
$041E	$3600	    			RLCF	STACK_0, 1, 0
$0420	$9000	    			BCF	STACK_0, 0, 0
$0422	$3601	    			RLCF	STACK_0+1, 1, 0
$0424	$0FFF	    			ADDLW	255
$0426	$D7FA	    			BRA	L_Adc_Read_2
$0428	$	L_Adc_Read_3:
$0428	$50C3	    			MOVF	ADRESL, 0, 0
$042A	$1200	    			IORWF	STACK_0, 1, 0
$042C	$0E00	    			MOVLW	0
$042E	$1201	    			IORWF	STACK_0+1, 1, 0
$0430	$90C2	    			BCF	ADCON0, 0, 0
$0432	$0012	    			RETURN
$0434	$	_WordToStr:
$0434	$C03C	FFE1			MOVFF	FARG_WordToStr+2, FSR1L
$0438	$C03D	FFE2			MOVFF	FARG_WordToStr+3, FSR1H
$043C	$0E20	    			MOVLW	32
$043E	$6EE6	    			MOVWF	POSTINC1, 0
$0440	$0E01	    			MOVLW	1
$0442	$243C	    			ADDWF	FARG_WordToStr+2, 0, 0
$0444	$6EE1	    			MOVWF	FSR1L, 0
$0446	$0E00	    			MOVLW	0
$0448	$203D	    			ADDWFC	FARG_WordToStr+3, 0, 0
$044A	$6EE2	    			MOVWF	FSR1L+1, 0
$044C	$0E20	    			MOVLW	32
$044E	$6EE6	    			MOVWF	POSTINC1, 0
$0450	$0E02	    			MOVLW	2
$0452	$243C	    			ADDWF	FARG_WordToStr+2, 0, 0
$0454	$6EE1	    			MOVWF	FSR1L, 0
$0456	$0E00	    			MOVLW	0
$0458	$203D	    			ADDWFC	FARG_WordToStr+3, 0, 0
$045A	$6EE2	    			MOVWF	FSR1L+1, 0
$045C	$0E20	    			MOVLW	32
$045E	$6EE6	    			MOVWF	POSTINC1, 0
$0460	$0E03	    			MOVLW	3
$0462	$243C	    			ADDWF	FARG_WordToStr+2, 0, 0
$0464	$6EE1	    			MOVWF	FSR1L, 0
$0466	$0E00	    			MOVLW	0
$0468	$203D	    			ADDWFC	FARG_WordToStr+3, 0, 0
$046A	$6EE2	    			MOVWF	FSR1L+1, 0
$046C	$0E20	    			MOVLW	32
$046E	$6EE6	    			MOVWF	POSTINC1, 0
$0470	$0E04	    			MOVLW	4
$0472	$243C	    			ADDWF	FARG_WordToStr+2, 0, 0
$0474	$6EE1	    			MOVWF	FSR1L, 0
$0476	$0E00	    			MOVLW	0
$0478	$203D	    			ADDWFC	FARG_WordToStr+3, 0, 0
$047A	$6EE2	    			MOVWF	FSR1L+1, 0
$047C	$0E30	    			MOVLW	48
$047E	$6EE6	    			MOVWF	POSTINC1, 0
$0480	$0E05	    			MOVLW	5
$0482	$243C	    			ADDWF	FARG_WordToStr+2, 0, 0
$0484	$6EE1	    			MOVWF	FSR1L, 0
$0486	$0E00	    			MOVLW	0
$0488	$203D	    			ADDWFC	FARG_WordToStr+3, 0, 0
$048A	$6EE2	    			MOVWF	FSR1L+1, 0
$048C	$6AE6	    			CLRF	POSTINC1, 0
$048E	$0E04	    			MOVLW	4
$0490	$6E3E	    			MOVWF	WordToStr_pos_L0, 0
$0492	$	L_WordToStr_4:
$0492	$0E00	    			MOVLW	0
$0494	$6E00	    			MOVWF	STACK_0, 0
$0496	$503B	    			MOVF	FARG_WordToStr+1, 0, 0
$0498	$5C00	    			SUBWF	STACK_0, 0, 0
$049A	$E102	    			BNZ	L_WordToStr_51
$049C	$503A	    			MOVF	FARG_WordToStr+0, 0, 0
$049E	$0800	    			SUBLW	0
$04A0	$	L_WordToStr_51:
$04A0	$E228	    			BC	L_WordToStr_5
$04A2	$503E	    			MOVF	WordToStr_pos_L0, 0, 0
$04A4	$243C	    			ADDWF	FARG_WordToStr+2, 0, 0
$04A6	$6EE1	    			MOVWF	FSR1L, 0
$04A8	$0E00	    			MOVLW	0
$04AA	$203D	    			ADDWFC	FARG_WordToStr+3, 0, 0
$04AC	$6EE2	    			MOVWF	FSR1L+1, 0
$04AE	$0E0A	    			MOVLW	10
$04B0	$6E04	    			MOVWF	STACK_4, 0
$04B2	$0E00	    			MOVLW	0
$04B4	$6E05	    			MOVWF	STACK_4+1, 0
$04B6	$C03A	F000			MOVFF	FARG_WordToStr+0, STACK_0
$04BA	$C03B	F001			MOVFF	FARG_WordToStr+1, STACK_0+1
$04BE	$EC6C	F000			CALL	_div_16x16_u
$04C2	$C008	F000			MOVFF	STACK_8, STACK_0
$04C6	$C009	F001			MOVFF	STACK_9, STACK_1
$04CA	$0E30	    			MOVLW	48
$04CC	$2600	    			ADDWF	STACK_0, 1, 0
$04CE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$04D2	$0E0A	    			MOVLW	10
$04D4	$6E04	    			MOVWF	STACK_4, 0
$04D6	$0E00	    			MOVLW	0
$04D8	$6E05	    			MOVWF	STACK_4+1, 0
$04DA	$C03A	F000			MOVFF	FARG_WordToStr+0, STACK_0
$04DE	$C03B	F001			MOVFF	FARG_WordToStr+1, STACK_0+1
$04E2	$EC6C	F000			CALL	_div_16x16_u
$04E6	$C000	F03A			MOVFF	STACK_0, FARG_WordToStr+0
$04EA	$C001	F03B			MOVFF	STACK_0+1, FARG_WordToStr+1
$04EE	$063E	    			DECF	WordToStr_pos_L0, 1, 0
$04F0	$D7D0	    			BRA	L_WordToStr_4
$04F2	$	L_WordToStr_5:
$04F2	$0012	    			RETURN
$04F4	$	_PWM_Change_Duty:
$04F4	$50CB	    			MOVF	PR2, 0, 0
$04F6	$0F01	    			ADDLW	1
$04F8	$6E00	    			MOVWF	STACK_0, 0
$04FA	$6A01	    			CLRF	STACK_0+1, 0
$04FC	$0E00	    			MOVLW	0
$04FE	$2201	    			ADDWFC	STACK_0+1, 1, 0
$0500	$C03A	F004			MOVFF	FARG_PWM_Change_Duty+0, STACK_4
$0504	$0E00	    			MOVLW	0
$0506	$6E05	    			MOVWF	STACK_4+1, 0
$0508	$EC8A	F000			CALL	_mul_16x16_s
$050C	$0E06	    			MOVLW	6
$050E	$6E02	    			MOVWF	STACK_2, 0
$0510	$C000	F004			MOVFF	STACK_0, STACK_4
$0514	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$0518	$5002	    			MOVF	STACK_2, 0, 0
$051A	$	L_PWM_Change_Duty_4:
$051A	$0100	    			MOVLB	0
$051C	$E005	    			BZ	L_PWM_Change_Duty_5
$051E	$3205	    			RRCF	STACK_4+1, 1, 0
$0520	$3204	    			RRCF	STACK_4, 1, 0
$0522	$9E05	    			BCF	STACK_4+1, 7, 0
$0524	$0FFF	    			ADDLW	255
$0526	$D7F9	    			BRA	L_PWM_Change_Duty_4
$0528	$	L_PWM_Change_Duty_5:
$0528	$C004	F000			MOVFF	STACK_4, STACK_0
$052C	$3600	    			RLCF	STACK_0, 1, 0
$052E	$9000	    			BCF	STACK_0, 0, 0
$0530	$3600	    			RLCF	STACK_0, 1, 0
$0532	$9000	    			BCF	STACK_0, 0, 0
$0534	$3600	    			RLCF	STACK_0, 1, 0
$0536	$9000	    			BCF	STACK_0, 0, 0
$0538	$3600	    			RLCF	STACK_0, 1, 0
$053A	$9000	    			BCF	STACK_0, 0, 0
$053C	$0E30	    			MOVLW	48
$053E	$1400	    			ANDWF	STACK_0, 0, 0
$0540	$6E03	    			MOVWF	STACK_3, 0
$0542	$C004	F000			MOVFF	STACK_4, STACK_0
$0546	$C005	F001			MOVFF	STACK_4+1, STACK_0+1
$054A	$3201	    			RRCF	STACK_0+1, 1, 0
$054C	$3200	    			RRCF	STACK_0, 1, 0
$054E	$9E01	    			BCF	STACK_0+1, 7, 0
$0550	$3201	    			RRCF	STACK_0+1, 1, 0
$0552	$3200	    			RRCF	STACK_0, 1, 0
$0554	$9E01	    			BCF	STACK_0+1, 7, 0
$0556	$C000	FFBE			MOVFF	STACK_0, CCPR1L
$055A	$0E0F	    			MOVLW	15
$055C	$16BD	    			ANDWF	CCP1CON, 1, 0
$055E	$5003	    			MOVF	STACK_3, 0, 0
$0560	$12BD	    			IORWF	CCP1CON, 1, 0
$0562	$0012	    			RETURN
$0564	$	_PWM_Init:
$0564	$6ABE	    			CLRF	CCPR1L, 0
$0566	$98BD	    			BCF	CCP1CON, 4, 0
$0568	$9ABD	    			BCF	CCP1CON, 5, 0
$056A	$0012	    			RETURN
$056C	$	_Lcd8_Init:
$056C	$EC07	F000			CALL	_Delay_5500us
$0570	$EC07	F000			CALL	_Delay_5500us
$0574	$EC07	F000			CALL	_Delay_5500us
$0578	$C03C	F015			MOVFF	FARG_Lcd8_Init+2, Lcd8bit_main_global_dataAddress
$057C	$C03D	F016			MOVFF	FARG_Lcd8_Init+3, Lcd8bit_main_global_dataAddress+1
$0580	$C03A	F017			MOVFF	FARG_Lcd8_Init+0, Lcd8bit_main_global_ctrlAddress
$0584	$C03B	F018			MOVFF	FARG_Lcd8_Init+1, Lcd8bit_main_global_ctrlAddress+1
$0588	$C03A	FFE9			MOVFF	FARG_Lcd8_Init+0, FSR0L
$058C	$C03B	FFEA			MOVFF	FARG_Lcd8_Init+1, FSR0H
$0590	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$0592	$C03C	FFE1			MOVFF	FARG_Lcd8_Init+2, FSR1L
$0596	$C03D	FFE2			MOVFF	FARG_Lcd8_Init+3, FSR1H
$059A	$6AE6	    			CLRF	POSTINC1, 0
$059C	$0E11	    			MOVLW	17
$059E	$24E1	    			ADDWF	FSR1L, 0, 0
$05A0	$6E00	    			MOVWF	STACK_0, 0
$05A2	$C000	FFE1			MOVFF	STACK_0, FSR1L
$05A6	$6AE7	    			CLRF	INDF1, 0
$05A8	$0E12	    			MOVLW	18
$05AA	$5C00	    			SUBWF	STACK_0, 0, 0
$05AC	$6EE1	    			MOVWF	FSR1L, 0
$05AE	$0E12	    			MOVLW	18
$05B0	$26E9	    			ADDWF	FSR0L, 1, 0
$05B2	$92EF	    			BCF	INDF0, __LCD8_ENABLE, 0
$05B4	$94EF	    			BCF	INDF0, __LCD8_RS, 0
$05B6	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$05B8	$0E12	    			MOVLW	18
$05BA	$5EE9	    			SUBWF	FSR0L, 1, 0
$05BC	$94EF	    			BCF	INDF0, __LCD8_RS, 0
$05BE	$92EF	    			BCF	INDF0, __LCD8_ENABLE, 0
$05C0	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$05C2	$0E30	    			MOVLW	48
$05C4	$6E3F	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05C6	$EC37	F000			CALL	_Lcd8_Cmd
$05CA	$0E30	    			MOVLW	48
$05CC	$6E3F	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05CE	$EC37	F000			CALL	_Lcd8_Cmd
$05D2	$0E30	    			MOVLW	48
$05D4	$6E3F	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05D6	$EC37	F000			CALL	_Lcd8_Cmd
$05DA	$0E38	    			MOVLW	56
$05DC	$6E3F	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05DE	$EC37	F000			CALL	_Lcd8_Cmd
$05E2	$0E08	    			MOVLW	8
$05E4	$6E3F	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05E6	$EC37	F000			CALL	_Lcd8_Cmd
$05EA	$0E01	    			MOVLW	1
$05EC	$6E3F	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05EE	$EC37	F000			CALL	_Lcd8_Cmd
$05F2	$0E06	    			MOVLW	6
$05F4	$6E3F	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05F6	$EC37	F000			CALL	_Lcd8_Cmd
$05FA	$0E0C	    			MOVLW	12
$05FC	$6E3F	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05FE	$EC37	F000			CALL	_Lcd8_Cmd
$0602	$0E01	    			MOVLW	1
$0604	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$0606	$0012	    			RETURN
$0608	$	_Word2Double:
$0608	$0100	    			MOVLB	0
$060A	$5000	    			MOVF	STACK_0, W, 0
$060C	$6E08	    			MOVWF	STACK_8, 0
$060E	$5001	    			MOVF	STACK_1, W, 0
$0610	$6E00	    			MOVWF	STACK_0, 0
$0612	$6A01	    			CLRF	STACK_1, 0
$0614	$6A02	    			CLRF	STACK_2, 0
$0616	$6A03	    			CLRF	STACK_3, 0
$0618	$	FLO16U32:
$0618	$6A0B	    			CLRF	STACK_11, 0
$061A	$6A0C	    			CLRF	STACK_12, 0
$061C	$0E96	    			MOVLW	150
$061E	$6E03	    			MOVWF	STACK_3, 0
$0620	$6A0A	    			CLRF	STACK_10, 0
$0622	$C000	F001			MOVFF	STACK_0, STACK_1
$0626	$C008	F000			MOVFF	STACK_8, STACK_0
$062A	$6A08	    			CLRF	STACK_8, 0
$062C	$6A02	    			CLRF	STACK_2, 0
$062E	$ECBE	F000			CALL	_NRM3232
$0632	$0012	    			RETURN
$0634	$	_Mul_32x32_FP:
$0634	$0100	    			MOVLB	0
$0636	$	FPM32:
$0636	$6A08	    			CLRF	STACK_8, 0
$0638	$6A09	    			CLRF	STACK_9, 0
$063A	$0E00	    			MOVLW	0x00
$063C	$6207	    			CPFSEQ	STACK_7, 0
$063E	$6403	    			CPFSGT	STACK_3, 0
$0640	$EFA0	F003			GOTO	MULJPRES032
$0644	$	M32BNE0:
$0644	$5002	    			MOVF	STACK_2, W, 0
$0646	$1806	    			XORWF	STACK_6, W, 0
$0648	$6E0A	    			MOVWF	STACK_10, 0
$064A	$5007	    			MOVF	STACK_7, W, 0
$064C	$2603	    			ADDWF	STACK_3, F, 0
$064E	$0E7E	    			MOVLW	126
$0650	$A0D8	    			BTFSS	STATUS, C, 0
$0652	$EF31	F003			GOTO	MTUN32
$0656	$5E03	    			SUBWF	STACK_3, F, 0
$0658	$B0D8	    			BTFSC	STATUS, C, 0
$065A	$EFA5	F003			GOTO	MULJPSETFOV32
$065E	$EF35	F003			GOTO	MOK32
$0662	$	MTUN32:
$0662	$5E03	    			SUBWF	STACK_3, F, 0
$0664	$A0D8	    			BTFSS	STATUS, C, 0
$0666	$EFAA	F003			GOTO	MULJPSETFUN32
$066A	$	MOK32:
$066A	$8E02	    			BSF	STACK_2, 7, 0
$066C	$8E06	    			BSF	STACK_6, 7, 0
$066E	$C002	F00E			MOVFF	STACK_2, STACK_14
$0672	$C001	F00B			MOVFF	STACK_1, STACK_11
$0676	$C000	F00D			MOVFF	STACK_0, STACK_13
$067A	$5000	    			MOVF	STACK_0, W, 0
$067C	$0204	    			MULWF	STACK_4, 0
$067E	$CFF4	F00C			MOVFF	PRODH, STACK_12
$0682	$5001	    			MOVF	STACK_1, W, 0
$0684	$0205	    			MULWF	STACK_5, 0
$0686	$CFF4	F000			MOVFF	PRODH, STACK_0
$068A	$CFF3	F008			MOVFF	PRODL, STACK_8
$068E	$0204	    			MULWF	STACK_4, 0
$0690	$50F3	    			MOVF	PRODL, W, 0
$0692	$260C	    			ADDWF	STACK_12, F, 0
$0694	$50F4	    			MOVF	PRODH, W, 0
$0696	$2208	    			ADDWFC	STACK_8, F, 0
$0698	$0E00	    			MOVLW	0x00
$069A	$2200	    			ADDWFC	STACK_0, F, 0
$069C	$500D	    			MOVF	STACK_13, W, 0
$069E	$0205	    			MULWF	STACK_5, 0
$06A0	$50F3	    			MOVF	PRODL, W, 0
$06A2	$260C	    			ADDWF	STACK_12, F, 0
$06A4	$50F4	    			MOVF	PRODH, W, 0
$06A6	$2208	    			ADDWFC	STACK_8, F, 0
$06A8	$0E00	    			MOVLW	0x00
$06AA	$2200	    			ADDWFC	STACK_0, F, 0
$06AC	$5002	    			MOVF	STACK_2, W, 0
$06AE	$0204	    			MULWF	STACK_4, 0
$06B0	$50F3	    			MOVF	PRODL, W, 0
$06B2	$2608	    			ADDWF	STACK_8, F, 0
$06B4	$50F4	    			MOVF	PRODH, W, 0
$06B6	$2200	    			ADDWFC	STACK_0, F, 0
$06B8	$5002	    			MOVF	STACK_2, W, 0
$06BA	$0205	    			MULWF	STACK_5, 0
$06BC	$6A01	    			CLRF	STACK_1, 0
$06BE	$0E00	    			MOVLW	0x00
$06C0	$2201	    			ADDWFC	STACK_1, F, 0
$06C2	$50F3	    			MOVF	PRODL, W, 0
$06C4	$2600	    			ADDWF	STACK_0, F, 0
$06C6	$50F4	    			MOVF	PRODH, W, 0
$06C8	$2201	    			ADDWFC	STACK_1, F, 0
$06CA	$500D	    			MOVF	STACK_13, W, 0
$06CC	$0206	    			MULWF	STACK_6, 0
$06CE	$50F3	    			MOVF	PRODL, W, 0
$06D0	$2608	    			ADDWF	STACK_8, F, 0
$06D2	$50F4	    			MOVF	PRODH, W, 0
$06D4	$2200	    			ADDWFC	STACK_0, F, 0
$06D6	$6A02	    			CLRF	STACK_2, 0
$06D8	$0E00	    			MOVLW	0x00
$06DA	$2201	    			ADDWFC	STACK_1, F, 0
$06DC	$2202	    			ADDWFC	STACK_2, F, 0
$06DE	$500B	    			MOVF	STACK_11, W, 0
$06E0	$0206	    			MULWF	STACK_6, 0
$06E2	$50F3	    			MOVF	PRODL, W, 0
$06E4	$2600	    			ADDWF	STACK_0, F, 0
$06E6	$50F4	    			MOVF	PRODH, W, 0
$06E8	$2201	    			ADDWFC	STACK_1, F, 0
$06EA	$0E00	    			MOVLW	0x00
$06EC	$2202	    			ADDWFC	STACK_2, F, 0
$06EE	$500E	    			MOVF	STACK_14, W, 0
$06F0	$0206	    			MULWF	STACK_6, 0
$06F2	$50F3	    			MOVF	PRODL, W, 0
$06F4	$2601	    			ADDWF	STACK_1, F, 0
$06F6	$50F4	    			MOVF	PRODH, W, 0
$06F8	$2202	    			ADDWFC	STACK_2, F, 0
$06FA	$BE02	    			BTFSC	STACK_2, 7, 0
$06FC	$EF88	F003			GOTO	MROUND32
$0700	$3608	    			RLCF	STACK_8, F, 0
$0702	$3600	    			RLCF	STACK_0, F, 0
$0704	$3601	    			RLCF	STACK_1, F, 0
$0706	$3602	    			RLCF	STACK_2, F, 0
$0708	$0603	    			DECF	STACK_3, F, 0
$070A	$B4D8	    			BTFSC	STATUS, Z, 0
$070C	$EFAA	F003			GOTO	MULJPSETFUN32
$0710	$	MROUND32:
$0710	$EF9B	F003			GOTO	MUL32OK
$0714	$80D8	    			BSF	STATUS, C, 0
$0716	$0E80	    			MOVLW	0x80
$0718	$6408	    			CPFSGT	STACK_8, 0
$071A	$3000	    			RRCF	STACK_0, W, 0
$071C	$0E00	    			MOVLW	0x00
$071E	$2200	    			ADDWFC	STACK_0, F, 0
$0720	$2201	    			ADDWFC	STACK_1, F, 0
$0722	$2202	    			ADDWFC	STACK_2, F, 0
$0724	$A0D8	    			BTFSS	STATUS, C, 0
$0726	$EF9B	F003			GOTO	MUL32OK
$072A	$3202	    			RRCF	STACK_2, F, 0
$072C	$3201	    			RRCF	STACK_1, F, 0
$072E	$3200	    			RRCF	STACK_0, F, 0
$0730	$4A03	    			INFSNZ	STACK_3, F, 0
$0732	$EFA5	F003			GOTO	MULJPSETFOV32
$0736	$	MUL32OK:
$0736	$AE0A	    			BTFSS	STACK_10, 7, 0
$0738	$9E02	    			BCF	STACK_2, 7, 0
$073A	$0E00	    			MOVLW	0
$073C	$EFAD	F003			GOTO	MULEEE
$0740	$	MULJPRES032:
$0740	$0E01	    			MOVLW	0x01
$0742	$EC1C	F000			CALL	_RES032
$0746	$EFAD	F003			GOTO	MULEEE
$074A	$	MULJPSETFOV32:
$074A	$0E02	    			MOVLW	0x02
$074C	$ECFB	F000			CALL	_SETFOV32
$0750	$EFAD	F003			GOTO	MULEEE
$0754	$	MULJPSETFUN32:
$0754	$0E04	    			MOVLW	0x04
$0756	$EC24	F000			CALL	_SETFUN32
$075A	$	MULEEE:
$075A	$0012	    			RETURN
$075C	$	_Double2Word:
$075C	$0100	    			MOVLB	0
$075E	$	INT3216U:
$075E	$6A0B	    			CLRF	STACK_11, 0
$0760	$6A0C	    			CLRF	STACK_12, 0
$0762	$6A0A	    			CLRF	STACK_10, 0
$0764	$5003	    			MOVF	STACK_3, W, 0
$0766	$B4D8	    			BTFSC	STATUS, Z, 0
$0768	$EFF9	F003			GOTO	IRES016U
$076C	$8E02	    			BSF	STACK_2, 7, 0
$076E	$0E8E	    			MOVLW	142
$0770	$5E03	    			SUBWF	STACK_3, F, 0
$0772	$BE03	    			BTFSC	STACK_3, 7, 0
$0774	$EFC1	F003			GOTO	SETEXP16U
$0778	$B4D8	    			BTFSC	STATUS, Z, 0
$077A	$EFC1	F003			GOTO	SETEXP16U
$077E	$EFFD	F003			GOTO	SETIOV16U
$0782	$	SETEXP16U:
$0782	$6D03	    			NEGF	STACK_3, F
$0784	$0E08	    			MOVLW	8
$0786	$5C03	    			SUBWF	STACK_3, W, 0
$0788	$A0D8	    			BTFSS	STATUS, C, 0
$078A	$EFD8	F003			GOTO	TSHIFT3216U
$078E	$6E03	    			MOVWF	STACK_3, 0
$0790	$3601	    			RLCF	STACK_1, F, 0
$0792	$C002	F001			MOVFF	STACK_2, STACK_1
$0796	$6A02	    			CLRF	STACK_2, 0
$0798	$0E08	    			MOVLW	8
$079A	$5C03	    			SUBWF	STACK_3, W, 0
$079C	$A0D8	    			BTFSS	STATUS, C, 0
$079E	$EFD8	F003			GOTO	TSHIFT3216U
$07A2	$3601	    			RLCF	STACK_1, F, 0
$07A4	$6A01	    			CLRF	STACK_1, 0
$07A6	$5003	    			MOVF	STACK_3, W, 0
$07A8	$A4D8	    			BTFSS	STATUS, Z, 0
$07AA	$90D8	    			BCF	STATUS, C, 0
$07AC	$EFE2	F003			GOTO	SHIFT3216UOK
$07B0	$	TSHIFT3216U:
$07B0	$5003	    			MOVF	STACK_3, W, 0
$07B2	$B4D8	    			BTFSC	STATUS, Z, 0
$07B4	$EFE2	F003			GOTO	SHIFT3216UOK
$07B8	$	SHIFT3216U:
$07B8	$90D8	    			BCF	STATUS, C, 0
$07BA	$3202	    			RRCF	STACK_2, F, 0
$07BC	$3201	    			RRCF	STACK_1, F, 0
$07BE	$2E03	    			DECFSZ	STACK_3, F, 0
$07C0	$EFDC	F003			GOTO	SHIFT3216U
$07C4	$	SHIFT3216UOK:
$07C4	$BC0B	    			BTFSC	STACK_11, 6, 0
$07C6	$A001	    			BTFSS	STACK_1, 0, 0
$07C8	$EFEF	F003			GOTO	INT3216UOK
$07CC	$A0D8	    			BTFSS	STATUS, C, 0
$07CE	$EFEF	F003			GOTO	INT3216UOK
$07D2	$2A01	    			INCF	STACK_1, F, 0
$07D4	$B4D8	    			BTFSC	STATUS, Z, 0
$07D6	$2A02	    			INCF	STACK_2, F, 0
$07D8	$BE02	    			BTFSC	STACK_2, 7, 0
$07DA	$EF0C	F004			GOTO	JPKSETIOV3224
$07DE	$	INT3216UOK:
$07DE	$AE0A	    			BTFSS	STACK_10, 7, 0
$07E0	$EF12	F004			GOTO	INT3216UEOK
$07E4	$1E02	    			COMF	STACK_2, F, 0
$07E6	$1E01	    			COMF	STACK_1, F, 0
$07E8	$2A01	    			INCF	STACK_1, F, 0
$07EA	$B4D8	    			BTFSC	STATUS, Z, 0
$07EC	$2A02	    			INCF	STACK_2, F, 0
$07EE	$EF12	F004			GOTO	INT3216UEOK
$07F2	$	IRES016U:
$07F2	$6A02	    			CLRF	STACK_2, 0
$07F4	$6A01	    			CLRF	STACK_1, 0
$07F6	$EF12	F004			GOTO	INT3216UEOK
$07FA	$	SETIOV16U:
$07FA	$800B	    			BSF	STACK_11, 0, 0
$07FC	$AE0B	    			BTFSS	STACK_11, 7, 0
$07FE	$EF16	F004			GOTO	INT3216UEER
$0802	$6A02	    			CLRF	STACK_2, 0
$0804	$AE0A	    			BTFSS	STACK_10, 7, 0
$0806	$EF16	F004			GOTO	INT3216UEER
$080A	$0EFF	    			MOVLW	0xFF
$080C	$6E02	    			MOVWF	STACK_2, 0
$080E	$6E01	    			MOVWF	STACK_1, 0
$0810	$360A	    			RLCF	STACK_10, F, 0
$0812	$3202	    			RRCF	STACK_2, F, 0
$0814	$EF16	F004			GOTO	INT3216UEER
$0818	$	JPKSETIOV3224:
$0818	$0E01	    			MOVLW	0x01
$081A	$6E0C	    			MOVWF	STACK_12, 0
$081C	$EC08	F001			CALL	_SETIOV3224
$0820	$EF18	F004			GOTO	INT3216UEEE
$0824	$	INT3216UEOK:
$0824	$0E00	    			MOVLW	0x00
$0826	$6E0C	    			MOVWF	STACK_12, 0
$0828	$EF18	F004			GOTO	INT3216UEEE
$082C	$	INT3216UEER:
$082C	$0EFF	    			MOVLW	0xFF
$082E	$6E0C	    			MOVWF	STACK_12, 0
$0830	$	INT3216UEEE:
$0830	$5001	    			MOVF	STACK_1, W, 0
$0832	$6E00	    			MOVWF	STACK_0, 0
$0834	$5002	    			MOVF	STACK_2, W, 0
$0836	$6E01	    			MOVWF	STACK_1, 0
$0838	$0012	    			RETURN
$083A	$	_main:
$083A	$0E53	    			MOVLW	83
$083C	$6E1E	    			MOVWF	lstr1_part3+0, 0
$083E	$0E65	    			MOVLW	101
$0840	$6E1F	    			MOVWF	lstr1_part3+1, 0
$0842	$0E72	    			MOVLW	114
$0844	$6E20	    			MOVWF	lstr1_part3+2, 0
$0846	$0E76	    			MOVLW	118
$0848	$6E21	    			MOVWF	lstr1_part3+3, 0
$084A	$0E6F	    			MOVLW	111
$084C	$6E22	    			MOVWF	lstr1_part3+4, 0
$084E	$0E20	    			MOVLW	32
$0850	$6E23	    			MOVWF	lstr1_part3+5, 0
$0852	$0E4D	    			MOVLW	77
$0854	$6E24	    			MOVWF	lstr1_part3+6, 0
$0856	$0E6F	    			MOVLW	111
$0858	$6E25	    			MOVWF	lstr1_part3+7, 0
$085A	$0E74	    			MOVLW	116
$085C	$6E26	    			MOVWF	lstr1_part3+8, 0
$085E	$0E6F	    			MOVLW	111
$0860	$6E27	    			MOVWF	lstr1_part3+9, 0
$0862	$0E72	    			MOVLW	114
$0864	$6E28	    			MOVWF	lstr1_part3+10, 0
$0866	$6A29	    			CLRF	lstr1_part3+11, 0
$0868	$0E53	    			MOVLW	83
$086A	$6E2A	    			MOVWF	lstr2_part3+0, 0
$086C	$0E70	    			MOVLW	112
$086E	$6E2B	    			MOVWF	lstr2_part3+1, 0
$0870	$0E65	    			MOVLW	101
$0872	$6E2C	    			MOVWF	lstr2_part3+2, 0
$0874	$0E65	    			MOVLW	101
$0876	$6E2D	    			MOVWF	lstr2_part3+3, 0
$0878	$0E64	    			MOVLW	100
$087A	$6E2E	    			MOVWF	lstr2_part3+4, 0
$087C	$0E20	    			MOVLW	32
$087E	$6E2F	    			MOVWF	lstr2_part3+5, 0
$0880	$0E3A	    			MOVLW	58
$0882	$6E30	    			MOVWF	lstr2_part3+6, 0
$0884	$6A31	    			CLRF	lstr2_part3+7, 0
$0886	$0E30	    			MOVLW	48
$0888	$6E33	    			MOVWF	main_text_L0+0, 0
$088A	$0E30	    			MOVLW	48
$088C	$6E34	    			MOVWF	main_text_L0+1, 0
$088E	$0E30	    			MOVLW	48
$0890	$6E35	    			MOVWF	main_text_L0+2, 0
$0892	$0E30	    			MOVLW	48
$0894	$6E36	    			MOVWF	main_text_L0+3, 0
$0896	$0E30	    			MOVLW	48
$0898	$6E37	    			MOVWF	main_text_L0+4, 0
$089A	$6A38	    			CLRF	main_text_L0+5, 0
;part3.c,64 :: 			void main()
;part3.c,68 :: 			keypressed = read_keypad();  //Reading a key from the keypad
$089C	$EC17	F001			CALL	_read_keypad
$08A0	$C000	F032			MOVFF	STACK_0, main_keypressed_L0
;part3.c,69 :: 			TRISD = 0x00;  //Define PORTD to operate as outpout
$08A4	$6A95	    			CLRF	TRISD, 0
;part3.c,70 :: 			TRISA = 0xFB;  // Define PORTA pin 2 as output.
$08A6	$0EFB	    			MOVLW	251
$08A8	$6E92	    			MOVWF	TRISA, 0
;part3.c,71 :: 			keypressed = keypressed - 0x30;
$08AA	$0E30	    			MOVLW	48
$08AC	$5E00	    			SUBWF	STACK_0, 1, 0
$08AE	$C000	F032			MOVFF	STACK_0, main_keypressed_L0
;part3.c,72 :: 			PORTD = function_numbers(keypressed); //Write the appropriate combination of bits to PORTD
$08B2	$C000	F03A			MOVFF	STACK_0, FARG_function_numbers+0
$08B6	$EC88	F001			CALL	_function_numbers
$08BA	$C000	FF83			MOVFF	STACK_0, PORTD
;part3.c,73 :: 			switch (function_numbers(keypressed))
$08BE	$C032	F03A			MOVFF	main_keypressed_L0, FARG_function_numbers+0
$08C2	$EC88	F001			CALL	_function_numbers
$08C6	$C000	F039			MOVFF	STACK_0, FLOC_main+27
$08CA	$D05C	    			BRA	L_main_16
;part3.c,75 :: 			case 0x4F:
$08CC	$	L_main_18:
;part3.c,77 :: 			Pwm_Init(500);
$08CC	$80CA	    			BSF	T2CON, T2CKPS0, 0
$08CE	$82CA	    			BSF	T2CON, T2CKPS1, 0
$08D0	$0EF9	    			MOVLW	249
$08D2	$6ECB	    			MOVWF	PR2, 0
$08D4	$ECB2	F002			CALL	_PWM_Init
;part3.c,80 :: 			Lcd8_Config(&PORTE, &PORTD, 2,1,0, 7,6,5,4,3,2,1,0);
$08D8	$0E84	    			MOVLW	PORTE
$08DA	$6E3A	    			MOVWF	FARG_Lcd8_Init+0, 0
$08DC	$0E0F	    			MOVLW	@PORTE
$08DE	$6E3B	    			MOVWF	FARG_Lcd8_Init+1, 0
$08E0	$0E83	    			MOVLW	PORTD
$08E2	$6E3C	    			MOVWF	FARG_Lcd8_Init+2, 0
$08E4	$0E0F	    			MOVLW	@PORTD
$08E6	$6E3D	    			MOVWF	FARG_Lcd8_Init+3, 0
$08E8	$ECB6	F002			CALL	_Lcd8_Init
;part3.c,81 :: 			Lcd8_Cmd(LCD_CLEAR);     // Clear screen
$08EC	$0E01	    			MOVLW	1
$08EE	$6E3F	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$08F0	$EC37	F000			CALL	_Lcd8_Cmd
;part3.c,82 :: 			Lcd8_Out(1, 1, "Servo Motor"); // Print text on LCD
$08F4	$0E01	    			MOVLW	1
$08F6	$6E3A	    			MOVWF	FARG_LCD8_Out+0, 0
$08F8	$0E01	    			MOVLW	1
$08FA	$6E3B	    			MOVWF	FARG_LCD8_Out+1, 0
$08FC	$0E1E	    			MOVLW	lstr1_part3
$08FE	$6E3C	    			MOVWF	FARG_LCD8_Out+2, 0
$0900	$0E00	    			MOVLW	@lstr1_part3
$0902	$6E3D	    			MOVWF	FARG_LCD8_Out+3, 0
$0904	$ECA9	F001			CALL	_LCD8_Out
;part3.c,83 :: 			Lcd8_Out(2, 1, "Speed :"); // Print text on LCD
$0908	$0E02	    			MOVLW	2
$090A	$6E3A	    			MOVWF	FARG_LCD8_Out+0, 0
$090C	$0E01	    			MOVLW	1
$090E	$6E3B	    			MOVWF	FARG_LCD8_Out+1, 0
$0910	$0E2A	    			MOVLW	lstr2_part3
$0912	$6E3C	    			MOVWF	FARG_LCD8_Out+2, 0
$0914	$0E00	    			MOVLW	@lstr2_part3
$0916	$6E3D	    			MOVWF	FARG_LCD8_Out+3, 0
$0918	$ECA9	F001			CALL	_LCD8_Out
;part3.c,86 :: 			while (1)
$091C	$	L_main_19:
;part3.c,87 :: 			{ Pwm_Start();
$091C	$ECED	F001			CALL	_PWM_Start
;part3.c,88 :: 			adc_rd  = ADC_read(0);          // get ADC value from first channel
$0920	$6A3A	    			CLRF	FARG_Adc_Read+0, 0
$0922	$ECF2	F001			CALL	_Adc_Read
$0926	$C000	F01A			MOVFF	STACK_0, _adc_rd
$092A	$C001	F01B			MOVFF	STACK_0+1, _adc_rd+1
;part3.c,89 :: 			adc_final= adc_rd*0.25;        //convert adc values to [0-255] as instructed
$092E	$EC04	F003			CALL	_word2double
$0932	$0E00	    			MOVLW	0
$0934	$6E04	    			MOVWF	STACK_4, 0
$0936	$0E00	    			MOVLW	0
$0938	$6E05	    			MOVWF	STACK_4+1, 0
$093A	$0E00	    			MOVLW	0
$093C	$6E06	    			MOVWF	STACK_4+2, 0
$093E	$0E7D	    			MOVLW	125
$0940	$6E07	    			MOVWF	STACK_4+3, 0
$0942	$EC1A	F003			CALL	_mul_32x32_fp
$0946	$ECAE	F003			CALL	_double2word
$094A	$C000	F01C			MOVFF	STACK_0, _adc_final
$094E	$C001	F01D			MOVFF	STACK_0+1, _adc_final+1
;part3.c,90 :: 			wordToStr(adc_final, text);
$0952	$C000	F03A			MOVFF	STACK_0, FARG_WordToStr+0
$0956	$C001	F03B			MOVFF	STACK_0+1, FARG_WordToStr+1
$095A	$0E33	    			MOVLW	main_text_L0
$095C	$6E3C	    			MOVWF	FARG_WordToStr+2, 0
$095E	$0E00	    			MOVLW	@main_text_L0
$0960	$6E3D	    			MOVWF	FARG_WordToStr+3, 0
$0962	$EC1A	F002			CALL	_WordToStr
;part3.c,91 :: 			Lcd8_Out(2,8, text);
$0966	$0E02	    			MOVLW	2
$0968	$6E3A	    			MOVWF	FARG_LCD8_Out+0, 0
$096A	$0E08	    			MOVLW	8
$096C	$6E3B	    			MOVWF	FARG_LCD8_Out+1, 0
$096E	$0E33	    			MOVLW	main_text_L0
$0970	$6E3C	    			MOVWF	FARG_LCD8_Out+2, 0
$0972	$0E00	    			MOVLW	@main_text_L0
$0974	$6E3D	    			MOVWF	FARG_LCD8_Out+3, 0
$0976	$ECA9	F001			CALL	_LCD8_Out
;part3.c,92 :: 			Pwm_Change_Duty(adc_final);       // adjusting the speed of the servo motor depending on the ADC values
$097A	$C01C	F03A			MOVFF	_adc_final, FARG_PWM_Change_Duty+0
$097E	$EC7A	F002			CALL	_PWM_Change_Duty
;part3.c,93 :: 			}
$0982	$D7CC	    			BRA	L_main_19
;part3.c,94 :: 			}
$0984	$	L_main_16:
$0984	$5039	    			MOVF	FLOC_main+27, 0, 0
$0986	$0A4F	    			XORLW	79
$0988	$E0A1	    			BZ	L_main_18
$098A	$	L_main_17:
;part3.c,95 :: 			}
$098A	$D7FF	    			BRA	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0008		Delay_1us
$000E		Delay_5500us
$002E		Delay_50us
$0038		RES032
$0048		SETFUN32
$0064		FIXSIGN32
$006E		Lcd8_Cmd
$00CC		Delay_22us
$00D8		Div_16x16_U
$0114		Mul_16x16_S
$017C		NRM3232
$01F6		SETFOV32
$0210		SETIOV3224
$022E		read_keypad
$0310		function_numbers
$0352		LCD8_Out
$03DA		PWM_Start
$03E4		Adc_Read
$0434		WordToStr
$04F4		PWM_Change_Duty
$0564		PWM_Init
$056C		Lcd8_Init
$0608		Word2Double
$0634		Mul_32x32_FP
$075C		Double2Word
$083A		main


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0008		_Delay_1us:
$000E		_Delay_5500us:
$002E		_Delay_50us:
$0038		_RES032:
$0048		_SETFUN32:
$0060		SETFUN32EEE:
$0064		_FIXSIGN32:
$006E		_Lcd8_Cmd:
$0084		L_Lcd8_Cmd_0:
$00B0		L_Lcd8_Cmd_1:
$00B2		L_Lcd8_Cmd_2:
$00C6		L_Lcd8_Cmd_3:
$00CA		L_Lcd8_Cmd_4:
$00CC		_Delay_22us:
$00D8		_Div_16x16_U:
$0114		_Mul_16x16_S:
$017C		_NRM3232:
$01B0		NORM3232:
$01BE		NORM3232A:
$01D4		JPNRES032:
$01E0		JPNSETFUN32:
$01EC		JMPNFIXSIGN32:
$01F4		NORM32EEE:
$01F6		_SETFOV32:
$020C		SETFOV32EEE:
$0210		_SETIOV3224:
$022A		SETIOV3224EEE:
$022E		_read_keypad:
$023E		L_read_keypad_0:
$0274		L_read_keypad_2:
$0284		L_read_keypad_3:
$0284		L_read_keypad_4:
$02BC		L_read_keypad_5:
$02CC		L_read_keypad_6:
$02CC		L_read_keypad_7:
$0302		L_read_keypad_8:
$030A		L_read_keypad_1:
$0310		_function_numbers:
$0312		L_function_numbers_11:
$0318		L_function_numbers_12:
$031E		L_function_numbers_13:
$0324		L_function_numbers_14:
$032A		L_function_numbers_15:
$0330		L_function_numbers_9:
$034E		L_function_numbers_10:
$0352		_LCD8_Out:
$0354		L_LCD8_Out_14:
$035A		L_LCD8_Out_15:
$0360		L_LCD8_Out_16:
$0366		L_LCD8_Out_17:
$036C		L_LCD8_Out_18:
$0372		L_LCD8_Out_12:
$038C		L_LCD8_Out_13:
$03A8		L_LCD8_Out_19:
$03D4		L_LCD8_Out_20:
$03DA		_PWM_Start:
$03E4		_Adc_Read:
$040A		L_Adc_Read_0:
$040E		L_Adc_Read_1:
$041C		L_Adc_Read_2:
$0428		L_Adc_Read_3:
$0434		_WordToStr:
$0492		L_WordToStr_4:
$04A0		L_WordToStr_51:
$04F2		L_WordToStr_5:
$04F4		_PWM_Change_Duty:
$051A		L_PWM_Change_Duty_4:
$0528		L_PWM_Change_Duty_5:
$0564		_PWM_Init:
$056C		_Lcd8_Init:
$0608		_Word2Double:
$0618		FLO16U32:
$0634		_Mul_32x32_FP:
$0636		FPM32:
$0644		M32BNE0:
$0662		MTUN32:
$066A		MOK32:
$0710		MROUND32:
$0736		MUL32OK:
$0740		MULJPRES032:
$074A		MULJPSETFOV32:
$0754		MULJPSETFUN32:
$075A		MULEEE:
$075C		_Double2Word:
$075E		INT3216U:
$0782		SETEXP16U:
$07B0		TSHIFT3216U:
$07B8		SHIFT3216U:
$07C4		SHIFT3216UOK:
$07DE		INT3216UOK:
$07F2		IRES016U:
$07FA		SETIOV16U:
$0818		JPKSETIOV3224:
$0824		INT3216UEOK:
$082C		INT3216UEER:
$0830		INT3216UEEE:
$083A		_main:
$08CC		L_main_18:
$091C		L_main_19:
$0984		L_main_16:
$098A		L_main_17:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		STACK_0
$0001		STACK_1
$0002		STACK_2
$0003		STACK_3
$0004		STACK_4
$0005		STACK_5
$0006		STACK_6
$0007		STACK_7
$0008		STACK_8
$0009		STACK_9
$000A		STACK_10
$000B		STACK_11
$000C		STACK_12
$000D		STACK_13
$000E		STACK_14
$000F		STACK_15
$0010		STACK_16
$0011		STACK_17
$0012		STACK_18
$0013		STACK_19
$0014		STACK_20
$0015		Lcd8bit_main_global_dataAddress
$0017		Lcd8bit_main_global_ctrlAddress
$0019		Lcd8bit_main_global_cmd
$001A		_adc_rd
$001C		_adc_final
$001E		lstr1_part3
$002A		lstr2_part3
$0032		main_keypressed_L0
$0033		main_text_L0
$0039		
$003A		FARG_Adc_Read+0
$003A		FARG_function_numbers+0
$003A		FARG_Lcd8_Init+0
$003A		FARG_LCD8_Out+0
$003A		FARG_PWM_Change_Duty+0
$003A		FARG_PWM_Init+0
$003A		FARG_WordToStr+0
$003A		read_keypad_var_L0
$003B		FARG_LCD8_Out+1
$003B		read_keypad_key_L0
$003C		FARG_Lcd8_Init+2
$003C		FARG_LCD8_Out+2
$003C		FARG_WordToStr+2
$003E		LCD8_Out_i_L0
$003E		WordToStr_pos_L0
$003F		FARG_Lcd8_Cmd+0
$0F81		PORTB
$0F83		PORTD
$0F84		PORTE
$0F92		TRISA
$0F93		TRISB
$0F94		TRISC
$0F95		TRISD
$0FBD		CCP1CON
$0FBE		CCPR1L
$0FC1		ADCON1
$0FC2		ADCON0
$0FC3		ADRESL
$0FC4		ADRESH
$0FCA		T2CON
$0FCB		PR2
$0FD8		STATUS
$0FD9		FSR2L
$0FDA		FSR2H
$0FDB		PLUSW2
$0FDC		PREINC2
$0FDD		POSTDEC2
$0FDE		POSTINC2
$0FDF		INDF2
$0FE0		BSR
$0FE1		FSR1L
$0FE2		FSR1H
$0FE3		PLUSW1
$0FE4		PREINC1
$0FE5		POSTDEC1
$0FE6		POSTINC1
$0FE7		INDF1
$0FE8		WREG
$0FE9		FSR0L
$0FEA		FSR0H
$0FEB		PLUSW0
$0FEC		PREINC0
$0FED		POSTDEC0
$0FEE		POSTINC0
$0FEF		INDF0
$0FF3		PRODL
$0FF4		PRODH
$0FF5		TABLAT
$0FF6		TBLPTRL
$0FF7		TBLPTRH
$0FF8		TBLPTRU
$0FF9		PCL
$0FFA		PCLATH
$0FFB		PCLATU
$0FFD		TOSL
$0FFE		TOSH
$0FFF		TOSU


